//autogenerated on 08/17/2017 8:39:13 PM
using System;
using System.Runtime.InteropServices;

namespace CSGL.Vulkan.Unmanaged {
    public static partial class VK {
        const string lib = "vulkan-1.dll";
        [DllImport(lib, EntryPoint = "vkCreateInstance")]
        public static extern VkResult CreateInstance(
            ref VkInstanceCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkInstance pInstance
        );

        [DllImport(lib, EntryPoint = "vkDestroyInstance")]
        public static extern void DestroyInstance(
            VkInstance instance,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkEnumeratePhysicalDevices")]
        public static extern VkResult EnumeratePhysicalDevices(
            VkInstance instance,
            ref uint pPhysicalDeviceCount,
            IntPtr pPhysicalDevices
        );

        [DllImport(lib, EntryPoint = "vkGetDeviceProcAddr")]
        public static extern IntPtr GetDeviceProcAddr(
            VkDevice device,
            byte[] pName
        );

        [DllImport(lib, EntryPoint = "vkGetInstanceProcAddr")]
        public static extern IntPtr GetInstanceProcAddr(
            VkInstance instance,
            byte[] pName
        );

        [DllImport(lib, EntryPoint = "vkGetPhysicalDeviceProperties")]
        public static extern void GetPhysicalDeviceProperties(
            VkPhysicalDevice physicalDevice,
            IntPtr pProperties
        );

        [DllImport(lib, EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties")]
        public static extern void GetPhysicalDeviceQueueFamilyProperties(
            VkPhysicalDevice physicalDevice,
            ref uint pQueueFamilyPropertyCount,
            IntPtr pQueueFamilyProperties
        );

        [DllImport(lib, EntryPoint = "vkGetPhysicalDeviceMemoryProperties")]
        public static extern void GetPhysicalDeviceMemoryProperties(
            VkPhysicalDevice physicalDevice,
            IntPtr pMemoryProperties
        );

        [DllImport(lib, EntryPoint = "vkGetPhysicalDeviceFeatures")]
        public static extern void GetPhysicalDeviceFeatures(
            VkPhysicalDevice physicalDevice,
            IntPtr pFeatures
        );

        [DllImport(lib, EntryPoint = "vkGetPhysicalDeviceFormatProperties")]
        public static extern void GetPhysicalDeviceFormatProperties(
            VkPhysicalDevice physicalDevice,
            VkFormat format,
            IntPtr pFormatProperties
        );

        [DllImport(lib, EntryPoint = "vkGetPhysicalDeviceImageFormatProperties")]
        public static extern VkResult GetPhysicalDeviceImageFormatProperties(
            VkPhysicalDevice physicalDevice,
            VkFormat format,
            VkImageType type,
            VkImageTiling tiling,
            VkImageUsageFlags usage,
            VkImageCreateFlags flags,
            IntPtr pImageFormatProperties
        );

        [DllImport(lib, EntryPoint = "vkCreateDevice")]
        public static extern VkResult CreateDevice(
            VkPhysicalDevice physicalDevice,
            ref VkDeviceCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkDevice pDevice
        );

        [DllImport(lib, EntryPoint = "vkDestroyDevice")]
        public static extern void DestroyDevice(
            VkDevice device,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkEnumerateInstanceLayerProperties")]
        public static extern VkResult EnumerateInstanceLayerProperties(
            ref uint pPropertyCount,
            IntPtr pProperties
        );

        [DllImport(lib, EntryPoint = "vkEnumerateInstanceExtensionProperties")]
        public static extern VkResult EnumerateInstanceExtensionProperties(
            byte[] pLayerName,
            ref uint pPropertyCount,
            IntPtr pProperties
        );

        [DllImport(lib, EntryPoint = "vkEnumerateDeviceLayerProperties")]
        public static extern VkResult EnumerateDeviceLayerProperties(
            VkPhysicalDevice physicalDevice,
            ref uint pPropertyCount,
            IntPtr pProperties
        );

        [DllImport(lib, EntryPoint = "vkEnumerateDeviceExtensionProperties")]
        public static extern VkResult EnumerateDeviceExtensionProperties(
            VkPhysicalDevice physicalDevice,
            byte[] pLayerName,
            ref uint pPropertyCount,
            IntPtr pProperties
        );

        [DllImport(lib, EntryPoint = "vkGetDeviceQueue")]
        public static extern void GetDeviceQueue(
            VkDevice device,
            uint queueFamilyIndex,
            uint queueIndex,
            out VkQueue pQueue
        );

        [DllImport(lib, EntryPoint = "vkQueueSubmit")]
        public static extern VkResult QueueSubmit(
            VkQueue queue,
            uint submitCount,
            IntPtr pSubmits,
            VkFence fence
        );

        [DllImport(lib, EntryPoint = "vkQueueWaitIdle")]
        public static extern VkResult QueueWaitIdle(
            VkQueue queue
        );

        [DllImport(lib, EntryPoint = "vkDeviceWaitIdle")]
        public static extern VkResult DeviceWaitIdle(
            VkDevice device
        );

        [DllImport(lib, EntryPoint = "vkAllocateMemory")]
        public static extern VkResult AllocateMemory(
            VkDevice device,
            ref VkMemoryAllocateInfo pAllocateInfo,
            IntPtr pAllocator,
            out VkDeviceMemory pMemory
        );

        [DllImport(lib, EntryPoint = "vkFreeMemory")]
        public static extern void FreeMemory(
            VkDevice device,
            VkDeviceMemory memory,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkMapMemory")]
        public static extern VkResult MapMemory(
            VkDevice device,
            VkDeviceMemory memory,
            ulong offset,
            ulong size,
            VkMemoryMapFlags flags,
            out IntPtr ppData
        );

        [DllImport(lib, EntryPoint = "vkUnmapMemory")]
        public static extern void UnmapMemory(
            VkDevice device,
            VkDeviceMemory memory
        );

        [DllImport(lib, EntryPoint = "vkFlushMappedMemoryRanges")]
        public static extern VkResult FlushMappedMemoryRanges(
            VkDevice device,
            uint memoryRangeCount,
            IntPtr pMemoryRanges
        );

        [DllImport(lib, EntryPoint = "vkInvalidateMappedMemoryRanges")]
        public static extern VkResult InvalidateMappedMemoryRanges(
            VkDevice device,
            uint memoryRangeCount,
            IntPtr pMemoryRanges
        );

        [DllImport(lib, EntryPoint = "vkGetDeviceMemoryCommitment")]
        public static extern void GetDeviceMemoryCommitment(
            VkDevice device,
            VkDeviceMemory memory,
            ref ulong pCommittedMemoryInBytes
        );

        [DllImport(lib, EntryPoint = "vkGetBufferMemoryRequirements")]
        public static extern void GetBufferMemoryRequirements(
            VkDevice device,
            VkBuffer buffer,
            out VkMemoryRequirements pMemoryRequirements
        );

        [DllImport(lib, EntryPoint = "vkBindBufferMemory")]
        public static extern VkResult BindBufferMemory(
            VkDevice device,
            VkBuffer buffer,
            VkDeviceMemory memory,
            ulong memoryOffset
        );

        [DllImport(lib, EntryPoint = "vkGetImageMemoryRequirements")]
        public static extern void GetImageMemoryRequirements(
            VkDevice device,
            VkImage image,
            out VkMemoryRequirements pMemoryRequirements
        );

        [DllImport(lib, EntryPoint = "vkBindImageMemory")]
        public static extern VkResult BindImageMemory(
            VkDevice device,
            VkImage image,
            VkDeviceMemory memory,
            ulong memoryOffset
        );

        [DllImport(lib, EntryPoint = "vkGetImageSparseMemoryRequirements")]
        public static extern void GetImageSparseMemoryRequirements(
            VkDevice device,
            VkImage image,
            ref uint pSparseMemoryRequirementCount,
            IntPtr pSparseMemoryRequirements
        );

        [DllImport(lib, EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties")]
        public static extern void GetPhysicalDeviceSparseImageFormatProperties(
            VkPhysicalDevice physicalDevice,
            VkFormat format,
            VkImageType type,
            VkSampleCountFlags samples,
            VkImageUsageFlags usage,
            VkImageTiling tiling,
            ref uint pPropertyCount,
            IntPtr pProperties
        );

        [DllImport(lib, EntryPoint = "vkQueueBindSparse")]
        public static extern VkResult QueueBindSparse(
            VkQueue queue,
            uint bindInfoCount,
            IntPtr pBindInfo,
            VkFence fence
        );

        [DllImport(lib, EntryPoint = "vkCreateFence")]
        public static extern VkResult CreateFence(
            VkDevice device,
            ref VkFenceCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkFence pFence
        );

        [DllImport(lib, EntryPoint = "vkDestroyFence")]
        public static extern void DestroyFence(
            VkDevice device,
            VkFence fence,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkResetFences")]
        public static extern VkResult ResetFences(
            VkDevice device,
            uint fenceCount,
            IntPtr pFences
        );

        [DllImport(lib, EntryPoint = "vkGetFenceStatus")]
        public static extern VkResult GetFenceStatus(
            VkDevice device,
            VkFence fence
        );

        [DllImport(lib, EntryPoint = "vkWaitForFences")]
        public static extern VkResult WaitForFences(
            VkDevice device,
            uint fenceCount,
            IntPtr pFences,
            uint waitAll,
            ulong timeout
        );

        [DllImport(lib, EntryPoint = "vkCreateSemaphore")]
        public static extern VkResult CreateSemaphore(
            VkDevice device,
            ref VkSemaphoreCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkSemaphore pSemaphore
        );

        [DllImport(lib, EntryPoint = "vkDestroySemaphore")]
        public static extern void DestroySemaphore(
            VkDevice device,
            VkSemaphore semaphore,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkCreateEvent")]
        public static extern VkResult CreateEvent(
            VkDevice device,
            ref VkEventCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkEvent pEvent
        );

        [DllImport(lib, EntryPoint = "vkDestroyEvent")]
        public static extern void DestroyEvent(
            VkDevice device,
            VkEvent _event,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkGetEventStatus")]
        public static extern VkResult GetEventStatus(
            VkDevice device,
            VkEvent _event
        );

        [DllImport(lib, EntryPoint = "vkSetEvent")]
        public static extern VkResult SetEvent(
            VkDevice device,
            VkEvent _event
        );

        [DllImport(lib, EntryPoint = "vkResetEvent")]
        public static extern VkResult ResetEvent(
            VkDevice device,
            VkEvent _event
        );

        [DllImport(lib, EntryPoint = "vkCreateQueryPool")]
        public static extern VkResult CreateQueryPool(
            VkDevice device,
            ref VkQueryPoolCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkQueryPool pQueryPool
        );

        [DllImport(lib, EntryPoint = "vkDestroyQueryPool")]
        public static extern void DestroyQueryPool(
            VkDevice device,
            VkQueryPool queryPool,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkGetQueryPoolResults")]
        public static extern VkResult GetQueryPoolResults(
            VkDevice device,
            VkQueryPool queryPool,
            uint firstQuery,
            uint queryCount,
            IntPtr dataSize,
            IntPtr pData,
            ulong stride,
            VkQueryResultFlags flags
        );

        [DllImport(lib, EntryPoint = "vkCreateBuffer")]
        public static extern VkResult CreateBuffer(
            VkDevice device,
            ref VkBufferCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkBuffer pBuffer
        );

        [DllImport(lib, EntryPoint = "vkDestroyBuffer")]
        public static extern void DestroyBuffer(
            VkDevice device,
            VkBuffer buffer,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkCreateBufferView")]
        public static extern VkResult CreateBufferView(
            VkDevice device,
            ref VkBufferViewCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkBufferView pView
        );

        [DllImport(lib, EntryPoint = "vkDestroyBufferView")]
        public static extern void DestroyBufferView(
            VkDevice device,
            VkBufferView bufferView,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkCreateImage")]
        public static extern VkResult CreateImage(
            VkDevice device,
            ref VkImageCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkImage pImage
        );

        [DllImport(lib, EntryPoint = "vkDestroyImage")]
        public static extern void DestroyImage(
            VkDevice device,
            VkImage image,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkGetImageSubresourceLayout")]
        public static extern void GetImageSubresourceLayout(
            VkDevice device,
            VkImage image,
            ref VkImageSubresource pSubresource,
            out VkSubresourceLayout pLayout
        );

        [DllImport(lib, EntryPoint = "vkCreateImageView")]
        public static extern VkResult CreateImageView(
            VkDevice device,
            ref VkImageViewCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkImageView pView
        );

        [DllImport(lib, EntryPoint = "vkDestroyImageView")]
        public static extern void DestroyImageView(
            VkDevice device,
            VkImageView imageView,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkCreateShaderModule")]
        public static extern VkResult CreateShaderModule(
            VkDevice device,
            ref VkShaderModuleCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkShaderModule pShaderModule
        );

        [DllImport(lib, EntryPoint = "vkDestroyShaderModule")]
        public static extern void DestroyShaderModule(
            VkDevice device,
            VkShaderModule shaderModule,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkCreatePipelineCache")]
        public static extern VkResult CreatePipelineCache(
            VkDevice device,
            ref VkPipelineCacheCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkPipelineCache pPipelineCache
        );

        [DllImport(lib, EntryPoint = "vkDestroyPipelineCache")]
        public static extern void DestroyPipelineCache(
            VkDevice device,
            VkPipelineCache pipelineCache,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkGetPipelineCacheData")]
        public static extern VkResult GetPipelineCacheData(
            VkDevice device,
            VkPipelineCache pipelineCache,
            ref ulong pDataSize,
            IntPtr pData
        );

        [DllImport(lib, EntryPoint = "vkMergePipelineCaches")]
        public static extern VkResult MergePipelineCaches(
            VkDevice device,
            VkPipelineCache dstCache,
            uint srcCacheCount,
            IntPtr pSrcCaches
        );

        [DllImport(lib, EntryPoint = "vkCreateGraphicsPipelines")]
        public static extern VkResult CreateGraphicsPipelines(
            VkDevice device,
            VkPipelineCache pipelineCache,
            uint createInfoCount,
            IntPtr pCreateInfos,
            IntPtr pAllocator,
            IntPtr pPipelines
        );

        [DllImport(lib, EntryPoint = "vkCreateComputePipelines")]
        public static extern VkResult CreateComputePipelines(
            VkDevice device,
            VkPipelineCache pipelineCache,
            uint createInfoCount,
            IntPtr pCreateInfos,
            IntPtr pAllocator,
            IntPtr pPipelines
        );

        [DllImport(lib, EntryPoint = "vkDestroyPipeline")]
        public static extern void DestroyPipeline(
            VkDevice device,
            VkPipeline pipeline,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkCreatePipelineLayout")]
        public static extern VkResult CreatePipelineLayout(
            VkDevice device,
            ref VkPipelineLayoutCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkPipelineLayout pPipelineLayout
        );

        [DllImport(lib, EntryPoint = "vkDestroyPipelineLayout")]
        public static extern void DestroyPipelineLayout(
            VkDevice device,
            VkPipelineLayout pipelineLayout,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkCreateSampler")]
        public static extern VkResult CreateSampler(
            VkDevice device,
            ref VkSamplerCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkSampler pSampler
        );

        [DllImport(lib, EntryPoint = "vkDestroySampler")]
        public static extern void DestroySampler(
            VkDevice device,
            VkSampler sampler,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkCreateDescriptorSetLayout")]
        public static extern VkResult CreateDescriptorSetLayout(
            VkDevice device,
            ref VkDescriptorSetLayoutCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkDescriptorSetLayout pSetLayout
        );

        [DllImport(lib, EntryPoint = "vkDestroyDescriptorSetLayout")]
        public static extern void DestroyDescriptorSetLayout(
            VkDevice device,
            VkDescriptorSetLayout descriptorSetLayout,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkCreateDescriptorPool")]
        public static extern VkResult CreateDescriptorPool(
            VkDevice device,
            ref VkDescriptorPoolCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkDescriptorPool pDescriptorPool
        );

        [DllImport(lib, EntryPoint = "vkDestroyDescriptorPool")]
        public static extern void DestroyDescriptorPool(
            VkDevice device,
            VkDescriptorPool descriptorPool,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkResetDescriptorPool")]
        public static extern VkResult ResetDescriptorPool(
            VkDevice device,
            VkDescriptorPool descriptorPool,
            VkDescriptorPoolResetFlags flags
        );

        [DllImport(lib, EntryPoint = "vkAllocateDescriptorSets")]
        public static extern VkResult AllocateDescriptorSets(
            VkDevice device,
            ref VkDescriptorSetAllocateInfo pAllocateInfo,
            IntPtr pDescriptorSets
        );

        [DllImport(lib, EntryPoint = "vkFreeDescriptorSets")]
        public static extern VkResult FreeDescriptorSets(
            VkDevice device,
            VkDescriptorPool descriptorPool,
            uint descriptorSetCount,
            IntPtr pDescriptorSets
        );

        [DllImport(lib, EntryPoint = "vkUpdateDescriptorSets")]
        public static extern void UpdateDescriptorSets(
            VkDevice device,
            uint descriptorWriteCount,
            IntPtr pDescriptorWrites,
            uint descriptorCopyCount,
            IntPtr pDescriptorCopies
        );

        [DllImport(lib, EntryPoint = "vkCreateFramebuffer")]
        public static extern VkResult CreateFramebuffer(
            VkDevice device,
            ref VkFramebufferCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkFramebuffer pFramebuffer
        );

        [DllImport(lib, EntryPoint = "vkDestroyFramebuffer")]
        public static extern void DestroyFramebuffer(
            VkDevice device,
            VkFramebuffer framebuffer,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkCreateRenderPass")]
        public static extern VkResult CreateRenderPass(
            VkDevice device,
            ref VkRenderPassCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkRenderPass pRenderPass
        );

        [DllImport(lib, EntryPoint = "vkDestroyRenderPass")]
        public static extern void DestroyRenderPass(
            VkDevice device,
            VkRenderPass renderPass,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkGetRenderAreaGranularity")]
        public static extern void GetRenderAreaGranularity(
            VkDevice device,
            VkRenderPass renderPass,
            out VkExtent2D pGranularity
        );

        [DllImport(lib, EntryPoint = "vkCreateCommandPool")]
        public static extern VkResult CreateCommandPool(
            VkDevice device,
            ref VkCommandPoolCreateInfo pCreateInfo,
            IntPtr pAllocator,
            out VkCommandPool pCommandPool
        );

        [DllImport(lib, EntryPoint = "vkDestroyCommandPool")]
        public static extern void DestroyCommandPool(
            VkDevice device,
            VkCommandPool commandPool,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkResetCommandPool")]
        public static extern VkResult ResetCommandPool(
            VkDevice device,
            VkCommandPool commandPool,
            VkCommandPoolResetFlags flags
        );

        [DllImport(lib, EntryPoint = "vkAllocateCommandBuffers")]
        public static extern VkResult AllocateCommandBuffers(
            VkDevice device,
            ref VkCommandBufferAllocateInfo pAllocateInfo,
            IntPtr pCommandBuffers
        );

        [DllImport(lib, EntryPoint = "vkFreeCommandBuffers")]
        public static extern void FreeCommandBuffers(
            VkDevice device,
            VkCommandPool commandPool,
            uint commandBufferCount,
            IntPtr pCommandBuffers
        );

        [DllImport(lib, EntryPoint = "vkBeginCommandBuffer")]
        public static extern VkResult BeginCommandBuffer(
            VkCommandBuffer commandBuffer,
            ref VkCommandBufferBeginInfo pBeginInfo
        );

        [DllImport(lib, EntryPoint = "vkEndCommandBuffer")]
        public static extern VkResult EndCommandBuffer(
            VkCommandBuffer commandBuffer
        );

        [DllImport(lib, EntryPoint = "vkResetCommandBuffer")]
        public static extern VkResult ResetCommandBuffer(
            VkCommandBuffer commandBuffer,
            VkCommandBufferResetFlags flags
        );

        [DllImport(lib, EntryPoint = "vkCmdBindPipeline")]
        public static extern void CmdBindPipeline(
            VkCommandBuffer commandBuffer,
            VkPipelineBindPoint pipelineBindPoint,
            VkPipeline pipeline
        );

        [DllImport(lib, EntryPoint = "vkCmdSetViewport")]
        public static extern void CmdSetViewport(
            VkCommandBuffer commandBuffer,
            uint firstViewport,
            uint viewportCount,
            IntPtr pViewports
        );

        [DllImport(lib, EntryPoint = "vkCmdSetScissor")]
        public static extern void CmdSetScissor(
            VkCommandBuffer commandBuffer,
            uint firstScissor,
            uint scissorCount,
            IntPtr pScissors
        );

        [DllImport(lib, EntryPoint = "vkCmdSetLineWidth")]
        public static extern void CmdSetLineWidth(
            VkCommandBuffer commandBuffer,
            float lineWidth
        );

        [DllImport(lib, EntryPoint = "vkCmdSetDepthBias")]
        public static extern void CmdSetDepthBias(
            VkCommandBuffer commandBuffer,
            float depthBiasConstantFactor,
            float depthBiasClamp,
            float depthBiasSlopeFactor
        );

        [DllImport(lib, EntryPoint = "vkCmdSetBlendConstants")]
        public static extern void CmdSetBlendConstants(
            VkCommandBuffer commandBuffer,
            IntPtr blendConstants
        );

        [DllImport(lib, EntryPoint = "vkCmdSetDepthBounds")]
        public static extern void CmdSetDepthBounds(
            VkCommandBuffer commandBuffer,
            float minDepthBounds,
            float maxDepthBounds
        );

        [DllImport(lib, EntryPoint = "vkCmdSetStencilCompareMask")]
        public static extern void CmdSetStencilCompareMask(
            VkCommandBuffer commandBuffer,
            VkStencilFaceFlags faceMask,
            uint compareMask
        );

        [DllImport(lib, EntryPoint = "vkCmdSetStencilWriteMask")]
        public static extern void CmdSetStencilWriteMask(
            VkCommandBuffer commandBuffer,
            VkStencilFaceFlags faceMask,
            uint writeMask
        );

        [DllImport(lib, EntryPoint = "vkCmdSetStencilReference")]
        public static extern void CmdSetStencilReference(
            VkCommandBuffer commandBuffer,
            VkStencilFaceFlags faceMask,
            uint reference
        );

        [DllImport(lib, EntryPoint = "vkCmdBindDescriptorSets")]
        public static extern void CmdBindDescriptorSets(
            VkCommandBuffer commandBuffer,
            VkPipelineBindPoint pipelineBindPoint,
            VkPipelineLayout layout,
            uint firstSet,
            uint descriptorSetCount,
            IntPtr pDescriptorSets,
            uint dynamicOffsetCount,
            IntPtr pDynamicOffsets
        );

        [DllImport(lib, EntryPoint = "vkCmdBindIndexBuffer")]
        public static extern void CmdBindIndexBuffer(
            VkCommandBuffer commandBuffer,
            VkBuffer buffer,
            ulong offset,
            VkIndexType indexType
        );

        [DllImport(lib, EntryPoint = "vkCmdBindVertexBuffers")]
        public static extern void CmdBindVertexBuffers(
            VkCommandBuffer commandBuffer,
            uint firstBinding,
            uint bindingCount,
            IntPtr pBuffers,
            ref ulong pOffsets
        );

        [DllImport(lib, EntryPoint = "vkCmdDraw")]
        public static extern void CmdDraw(
            VkCommandBuffer commandBuffer,
            uint vertexCount,
            uint instanceCount,
            uint firstVertex,
            uint firstInstance
        );

        [DllImport(lib, EntryPoint = "vkCmdDrawIndexed")]
        public static extern void CmdDrawIndexed(
            VkCommandBuffer commandBuffer,
            uint indexCount,
            uint instanceCount,
            uint firstIndex,
            int vertexOffset,
            uint firstInstance
        );

        [DllImport(lib, EntryPoint = "vkCmdDrawIndirect")]
        public static extern void CmdDrawIndirect(
            VkCommandBuffer commandBuffer,
            VkBuffer buffer,
            ulong offset,
            uint drawCount,
            uint stride
        );

        [DllImport(lib, EntryPoint = "vkCmdDrawIndexedIndirect")]
        public static extern void CmdDrawIndexedIndirect(
            VkCommandBuffer commandBuffer,
            VkBuffer buffer,
            ulong offset,
            uint drawCount,
            uint stride
        );

        [DllImport(lib, EntryPoint = "vkCmdDispatch")]
        public static extern void CmdDispatch(
            VkCommandBuffer commandBuffer,
            uint groupCountX,
            uint groupCountY,
            uint groupCountZ
        );

        [DllImport(lib, EntryPoint = "vkCmdDispatchIndirect")]
        public static extern void CmdDispatchIndirect(
            VkCommandBuffer commandBuffer,
            VkBuffer buffer,
            ulong offset
        );

        [DllImport(lib, EntryPoint = "vkCmdCopyBuffer")]
        public static extern void CmdCopyBuffer(
            VkCommandBuffer commandBuffer,
            VkBuffer srcBuffer,
            VkBuffer dstBuffer,
            uint regionCount,
            IntPtr pRegions
        );

        [DllImport(lib, EntryPoint = "vkCmdCopyImage")]
        public static extern void CmdCopyImage(
            VkCommandBuffer commandBuffer,
            VkImage srcImage,
            VkImageLayout srcImageLayout,
            VkImage dstImage,
            VkImageLayout dstImageLayout,
            uint regionCount,
            IntPtr pRegions
        );

        [DllImport(lib, EntryPoint = "vkCmdBlitImage")]
        public static extern void CmdBlitImage(
            VkCommandBuffer commandBuffer,
            VkImage srcImage,
            VkImageLayout srcImageLayout,
            VkImage dstImage,
            VkImageLayout dstImageLayout,
            uint regionCount,
            IntPtr pRegions,
            VkFilter filter
        );

        [DllImport(lib, EntryPoint = "vkCmdCopyBufferToImage")]
        public static extern void CmdCopyBufferToImage(
            VkCommandBuffer commandBuffer,
            VkBuffer srcBuffer,
            VkImage dstImage,
            VkImageLayout dstImageLayout,
            uint regionCount,
            IntPtr pRegions
        );

        [DllImport(lib, EntryPoint = "vkCmdCopyImageToBuffer")]
        public static extern void CmdCopyImageToBuffer(
            VkCommandBuffer commandBuffer,
            VkImage srcImage,
            VkImageLayout srcImageLayout,
            VkBuffer dstBuffer,
            uint regionCount,
            IntPtr pRegions
        );

        [DllImport(lib, EntryPoint = "vkCmdUpdateBuffer")]
        public static extern void CmdUpdateBuffer(
            VkCommandBuffer commandBuffer,
            VkBuffer dstBuffer,
            ulong dstOffset,
            ulong dataSize,
            IntPtr pData
        );

        [DllImport(lib, EntryPoint = "vkCmdFillBuffer")]
        public static extern void CmdFillBuffer(
            VkCommandBuffer commandBuffer,
            VkBuffer dstBuffer,
            ulong dstOffset,
            ulong size,
            uint data
        );

        [DllImport(lib, EntryPoint = "vkCmdClearColorImage")]
        public static extern void CmdClearColorImage(
            VkCommandBuffer commandBuffer,
            VkImage image,
            VkImageLayout imageLayout,
            ref VkClearColorValue pColor,
            uint rangeCount,
            IntPtr pRanges
        );

        [DllImport(lib, EntryPoint = "vkCmdClearDepthStencilImage")]
        public static extern void CmdClearDepthStencilImage(
            VkCommandBuffer commandBuffer,
            VkImage image,
            VkImageLayout imageLayout,
            ref VkClearDepthStencilValue pDepthStencil,
            uint rangeCount,
            IntPtr pRanges
        );

        [DllImport(lib, EntryPoint = "vkCmdClearAttachments")]
        public static extern void CmdClearAttachments(
            VkCommandBuffer commandBuffer,
            uint attachmentCount,
            IntPtr pAttachments,
            uint rectCount,
            IntPtr pRects
        );

        [DllImport(lib, EntryPoint = "vkCmdResolveImage")]
        public static extern void CmdResolveImage(
            VkCommandBuffer commandBuffer,
            VkImage srcImage,
            VkImageLayout srcImageLayout,
            VkImage dstImage,
            VkImageLayout dstImageLayout,
            uint regionCount,
            IntPtr pRegions
        );

        [DllImport(lib, EntryPoint = "vkCmdSetEvent")]
        public static extern void CmdSetEvent(
            VkCommandBuffer commandBuffer,
            VkEvent _event,
            VkPipelineStageFlags stageMask
        );

        [DllImport(lib, EntryPoint = "vkCmdResetEvent")]
        public static extern void CmdResetEvent(
            VkCommandBuffer commandBuffer,
            VkEvent _event,
            VkPipelineStageFlags stageMask
        );

        [DllImport(lib, EntryPoint = "vkCmdWaitEvents")]
        public static extern void CmdWaitEvents(
            VkCommandBuffer commandBuffer,
            uint eventCount,
            IntPtr pEvents,
            VkPipelineStageFlags srcStageMask,
            VkPipelineStageFlags dstStageMask,
            uint memoryBarrierCount,
            IntPtr pMemoryBarriers,
            uint bufferMemoryBarrierCount,
            IntPtr pBufferMemoryBarriers,
            uint imageMemoryBarrierCount,
            IntPtr pImageMemoryBarriers
        );

        [DllImport(lib, EntryPoint = "vkCmdPipelineBarrier")]
        public static extern void CmdPipelineBarrier(
            VkCommandBuffer commandBuffer,
            VkPipelineStageFlags srcStageMask,
            VkPipelineStageFlags dstStageMask,
            VkDependencyFlags dependencyFlags,
            uint memoryBarrierCount,
            IntPtr pMemoryBarriers,
            uint bufferMemoryBarrierCount,
            IntPtr pBufferMemoryBarriers,
            uint imageMemoryBarrierCount,
            IntPtr pImageMemoryBarriers
        );

        [DllImport(lib, EntryPoint = "vkCmdBeginQuery")]
        public static extern void CmdBeginQuery(
            VkCommandBuffer commandBuffer,
            VkQueryPool queryPool,
            uint query,
            VkQueryControlFlags flags
        );

        [DllImport(lib, EntryPoint = "vkCmdEndQuery")]
        public static extern void CmdEndQuery(
            VkCommandBuffer commandBuffer,
            VkQueryPool queryPool,
            uint query
        );

        [DllImport(lib, EntryPoint = "vkCmdResetQueryPool")]
        public static extern void CmdResetQueryPool(
            VkCommandBuffer commandBuffer,
            VkQueryPool queryPool,
            uint firstQuery,
            uint queryCount
        );

        [DllImport(lib, EntryPoint = "vkCmdWriteTimestamp")]
        public static extern void CmdWriteTimestamp(
            VkCommandBuffer commandBuffer,
            VkPipelineStageFlags pipelineStage,
            VkQueryPool queryPool,
            uint query
        );

        [DllImport(lib, EntryPoint = "vkCmdCopyQueryPoolResults")]
        public static extern void CmdCopyQueryPoolResults(
            VkCommandBuffer commandBuffer,
            VkQueryPool queryPool,
            uint firstQuery,
            uint queryCount,
            VkBuffer dstBuffer,
            ulong dstOffset,
            ulong stride,
            VkQueryResultFlags flags
        );

        [DllImport(lib, EntryPoint = "vkCmdPushConstants")]
        public static extern void CmdPushConstants(
            VkCommandBuffer commandBuffer,
            VkPipelineLayout layout,
            VkShaderStageFlags stageFlags,
            uint offset,
            uint size,
            IntPtr pValues
        );

        [DllImport(lib, EntryPoint = "vkCmdBeginRenderPass")]
        public static extern void CmdBeginRenderPass(
            VkCommandBuffer commandBuffer,
            ref VkRenderPassBeginInfo pRenderPassBegin,
            VkSubpassContents contents
        );

        [DllImport(lib, EntryPoint = "vkCmdNextSubpass")]
        public static extern void CmdNextSubpass(
            VkCommandBuffer commandBuffer,
            VkSubpassContents contents
        );

        [DllImport(lib, EntryPoint = "vkCmdEndRenderPass")]
        public static extern void CmdEndRenderPass(
            VkCommandBuffer commandBuffer
        );

        [DllImport(lib, EntryPoint = "vkCmdExecuteCommands")]
        public static extern void CmdExecuteCommands(
            VkCommandBuffer commandBuffer,
            uint commandBufferCount,
            IntPtr pCommandBuffers
        );

        [DllImport(lib, EntryPoint = "vkDestroySurfaceKHR")]
        public static extern void DestroySurfaceKHR(
            VkInstance instance,
            VkSurfaceKHR surface,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkGetPhysicalDeviceSurfaceSupportKHR")]
        public static extern VkResult GetPhysicalDeviceSurfaceSupportKHR(
            VkPhysicalDevice physicalDevice,
            uint queueFamilyIndex,
            VkSurfaceKHR surface,
            out bool pSupported
        );

        [DllImport(lib, EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilitiesKHR")]
        public static extern VkResult GetPhysicalDeviceSurfaceCapabilitiesKHR(
            VkPhysicalDevice physicalDevice,
            VkSurfaceKHR surface,
            IntPtr pSurfaceCapabilities
        );

        [DllImport(lib, EntryPoint = "vkGetPhysicalDeviceSurfaceFormatsKHR")]
        public static extern VkResult GetPhysicalDeviceSurfaceFormatsKHR(
            VkPhysicalDevice physicalDevice,
            VkSurfaceKHR surface,
            ref uint pSurfaceFormatCount,
            IntPtr pSurfaceFormats
        );

        [DllImport(lib, EntryPoint = "vkGetPhysicalDeviceSurfacePresentModesKHR")]
        public static extern VkResult GetPhysicalDeviceSurfacePresentModesKHR(
            VkPhysicalDevice physicalDevice,
            VkSurfaceKHR surface,
            ref uint pPresentModeCount,
            IntPtr pPresentModes
        );

        [DllImport(lib, EntryPoint = "vkCreateSwapchainKHR")]
        public static extern VkResult CreateSwapchainKHR(
            VkDevice device,
            ref VkSwapchainCreateInfoKHR pCreateInfo,
            IntPtr pAllocator,
            out VkSwapchainKHR pSwapchain
        );

        [DllImport(lib, EntryPoint = "vkDestroySwapchainKHR")]
        public static extern void DestroySwapchainKHR(
            VkDevice device,
            VkSwapchainKHR swapchain,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkGetSwapchainImagesKHR")]
        public static extern VkResult GetSwapchainImagesKHR(
            VkDevice device,
            VkSwapchainKHR swapchain,
            ref uint pSwapchainImageCount,
            IntPtr pSwapchainImages
        );

        [DllImport(lib, EntryPoint = "vkAcquireNextImageKHR")]
        public static extern VkResult AcquireNextImageKHR(
            VkDevice device,
            VkSwapchainKHR swapchain,
            ulong timeout,
            VkSemaphore semaphore,
            VkFence fence,
            out uint pImageIndex
        );

        [DllImport(lib, EntryPoint = "vkQueuePresentKHR")]
        public static extern VkResult QueuePresentKHR(
            VkQueue queue,
            ref VkPresentInfoKHR pPresentInfo
        );

        [DllImport(lib, EntryPoint = "vkCreateDebugReportCallbackEXT")]
        public static extern VkResult CreateDebugReportCallbackEXT(
            VkInstance instance,
            ref VkDebugReportCallbackCreateInfoEXT pCreateInfo,
            IntPtr pAllocator,
            out VkDebugReportCallbackEXT pCallback
        );

        [DllImport(lib, EntryPoint = "vkDestroyDebugReportCallbackEXT")]
        public static extern void DestroyDebugReportCallbackEXT(
            VkInstance instance,
            VkDebugReportCallbackEXT callback,
            IntPtr pAllocator
        );

        [DllImport(lib, EntryPoint = "vkDebugReportMessageEXT")]
        public static extern void DebugReportMessageEXT(
            VkInstance instance,
            VkDebugReportFlagsEXT flags,
            VkDebugReportObjectTypeEXT objectType,
            ulong _object,
            IntPtr location,
            int messageCode,
            byte[] pLayerPrefix,
            byte[] pMessage
        );

    }
}
