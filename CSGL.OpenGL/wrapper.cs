//autogenerated on 7/27/2016 8:36:07 PM
using System;
using System.Text;

using static CSGL.OpenGL.Unmanaged.GL;

namespace CSGL.OpenGL {
    public static partial class GL {
        public static void ActiveShaderProgram(uint pipeline, uint program) {
            glActiveShaderProgram(pipeline, program);
        }

        public static void ActiveTexture(TextureUnit texture) {
            glActiveTexture(texture);
        }

        public static void AttachShader(uint program, uint shader) {
            glAttachShader(program, shader);
        }

        public static void BeginConditionalRender(uint id, TypeEnum mode) {
            glBeginConditionalRender(id, mode);
        }

        public static void BeginQuery(QueryMode target, uint id) {
            glBeginQuery(target, id);
        }

        public static void BeginQueryIndexed(QueryMode target, uint index, uint id) {
            glBeginQueryIndexed(target, index, id);
        }

        public static void BeginTransformFeedback(TransformFeedbackMode primitiveMode) {
            glBeginTransformFeedback(primitiveMode);
        }

        public static void BindAttribLocation(uint program, uint index, string name) {
            glBindAttribLocation(program, index, name);
        }

        public static void BindBuffer(BufferTarget target, uint buffer) {
            glBindBuffer(target, buffer);
        }

        public static void BindBufferBase(BufferTarget target, uint index, uint buffer) {
            glBindBufferBase(target, index, buffer);
        }

        public static void BindBufferRange(BufferTarget target, uint index, uint buffer, int offset, int size) {
            glBindBufferRange(target, index, buffer, offset, size);
        }

        public static void BindBuffersBase(BufferTarget target, uint first, int count, uint[] buffers) {
            glBindBuffersBase(target, first, count, buffers);
        }

        public static void BindBuffersRange(BufferTarget target, uint first, int count, uint[] buffers, int[] offsets, int[] sizes) {
            glBindBuffersRange(target, first, count, buffers, offsets, sizes);
        }

        public static void BindFragDataLocation(uint program, uint color, string name) {
            glBindFragDataLocation(program, color, name);
        }

        public static void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, string name) {
            glBindFragDataLocationIndexed(program, colorNumber, index, name);
        }

        public static void BindFramebuffer(FramebufferTarget target, uint framebuffer) {
            glBindFramebuffer(target, framebuffer);
        }

        public static void BindImageTexture(uint unit, uint texture, int level, bool layered, int layer, uint access, uint format) {
            glBindImageTexture(unit, texture, level, layered, layer, access, format);
        }

        public static void BindImageTextures(uint first, int count, uint[] textures) {
            glBindImageTextures(first, count, textures);
        }

        public static void BindProgramPipeline(uint pipeline) {
            glBindProgramPipeline(pipeline);
        }

        public static void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer) {
            glBindRenderbuffer(target, renderbuffer);
        }

        public static void BindSampler(uint unit, uint sampler) {
            glBindSampler(unit, sampler);
        }

        public static void BindSamplers(uint first, int count, uint[] samplers) {
            glBindSamplers(first, count, samplers);
        }

        public static void BindTexture(TextureTarget target, uint texture) {
            glBindTexture(target, texture);
        }

        public static void BindTextures(uint first, int count, uint[] textures) {
            glBindTextures(first, count, textures);
        }

        public static void BindTextureUnit(uint unit, uint texture) {
            glBindTextureUnit(unit, texture);
        }

        public static void BindTransformFeedback(uint target, uint id) {
            glBindTransformFeedback(target, id);
        }

        public static void BindVertexArray(uint array) {
            glBindVertexArray(array);
        }

        public static void BindVertexBuffer(uint bindingindex, uint buffer, int offset, int stride) {
            glBindVertexBuffer(bindingindex, buffer, offset, stride);
        }

        public static void BindVertexBuffers(uint first, int count, uint[] buffers, int[] offsets, int[] strides) {
            glBindVertexBuffers(first, count, buffers, offsets, strides);
        }

        public static void BlendColor(float red, float green, float blue, float alpha) {
            glBlendColor(red, green, blue, alpha);
        }

        public static void BlendEquation(BlendEquationMode mode) {
            glBlendEquation(mode);
        }

        public static void BlendEquationi(uint buf, uint mode) {
            glBlendEquationi(buf, mode);
        }

        public static void BlendEquationSeparate(BlendEquationMode modeRGB, BlendEquationMode modeAlpha) {
            glBlendEquationSeparate(modeRGB, modeAlpha);
        }

        public static void BlendEquationSeparatei(uint buf, uint modeRGB, uint modeAlpha) {
            glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
        }

        public static void BlendFunc(BlendingFactor sfactor, BlendingFactor dfactor) {
            glBlendFunc(sfactor, dfactor);
        }

        public static void BlendFunci(uint buf, uint src, uint dst) {
            glBlendFunci(buf, src, dst);
        }

        public static void BlendFuncSeparate(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha) {
            glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }

        public static void BlendFuncSeparatei(uint buf, uint srcRGB, uint dstRGB, uint srcAlpha, uint dstAlpha) {
            glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }

        public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, ClearBufferMask mask, uint filter) {
            glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }

        public static void BlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter) {
            glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }

        public static void BufferData(BufferTarget target, int size, IntPtr data, BufferUsage usage) {
            glBufferData(target, size, data, usage);
        }

        public static void BufferStorage(uint target, int size, IntPtr data, uint flags) {
            glBufferStorage(target, size, data, flags);
        }

        public static void BufferSubData(BufferTarget target, int offset, int size, IntPtr data) {
            glBufferSubData(target, offset, size, data);
        }

        public static uint CheckFramebufferStatus(FramebufferTarget target) {
            return glCheckFramebufferStatus(target);
        }

        public static uint CheckNamedFramebufferStatus(uint framebuffer, uint target) {
            return glCheckNamedFramebufferStatus(framebuffer, target);
        }

        public static void ClampColor(ClampColorTarget target, bool clamp) {
            glClampColor(target, clamp);
        }

        public static void Clear(ClearBufferMask mask) {
            glClear(mask);
        }

        public static void ClearBufferData(uint target, uint internalformat, uint format, uint type, IntPtr data) {
            glClearBufferData(target, internalformat, format, type, data);
        }

        public static void ClearBufferfi(uint buffer, int drawbuffer, float depth, int stencil) {
            glClearBufferfi(buffer, drawbuffer, depth, stencil);
        }

        public static void ClearBufferfv(uint buffer, int drawbuffer, float[] value) {
            glClearBufferfv(buffer, drawbuffer, value);
        }

        public static void ClearBufferiv(uint buffer, int drawbuffer, int[] value) {
            glClearBufferiv(buffer, drawbuffer, value);
        }

        public static void ClearBufferSubData(uint target, uint internalformat, int offset, int size, uint format, uint type, IntPtr data) {
            glClearBufferSubData(target, internalformat, offset, size, format, type, data);
        }

        public static void ClearBufferuiv(uint buffer, int drawbuffer, uint[] value) {
            glClearBufferuiv(buffer, drawbuffer, value);
        }

        public static void ClearColor(float red, float green, float blue, float alpha) {
            glClearColor(red, green, blue, alpha);
        }

        public static void ClearDepth(double depth) {
            glClearDepth(depth);
        }

        public static void ClearDepthf(float d) {
            glClearDepthf(d);
        }

        public static void ClearNamedBufferData(uint buffer, uint internalformat, uint format, uint type, IntPtr data) {
            glClearNamedBufferData(buffer, internalformat, format, type, data);
        }

        public static void ClearNamedBufferSubData(uint buffer, uint internalformat, int offset, int size, uint format, uint type, IntPtr data) {
            glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
        }

        public static void ClearNamedFramebufferfi(uint framebuffer, uint buffer, int drawbuffer, float depth, int stencil) {
            glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
        }

        public static void ClearNamedFramebufferfv(uint framebuffer, uint buffer, int drawbuffer, ref float value) {
            glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, ref value);
        }

        public static void ClearNamedFramebufferiv(uint framebuffer, uint buffer, int drawbuffer, ref int value) {
            glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, ref value);
        }

        public static void ClearNamedFramebufferuiv(uint framebuffer, uint buffer, int drawbuffer, ref uint value) {
            glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, ref value);
        }

        public static void ClearStencil(int s) {
            glClearStencil(s);
        }

        public static void ClearTexImage(uint texture, int level, uint format, uint type, IntPtr data) {
            glClearTexImage(texture, level, format, type, data);
        }

        public static void ClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr data) {
            glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
        }

        public static uint ClientWaitSync(GLsync sync, uint flags, ulong timeout) {
            return glClientWaitSync(sync, flags, timeout);
        }

        public static void ClipControl(uint origin, uint depth) {
            glClipControl(origin, depth);
        }

        public static void ColorMask(bool red, bool green, bool blue, bool alpha) {
            glColorMask(red, green, blue, alpha);
        }

        public static void ColorMaski(uint index, bool r, bool g, bool b, bool a) {
            glColorMaski(index, r, g, b, a);
        }

        public static void CompileShader(uint shader) {
            glCompileShader(shader);
        }

        public static void CompressedTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int border, int imageSize, IntPtr data) {
            glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
        }

        public static void CompressedTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data) {
            glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
        }

        public static void CompressedTexImage3D(TextureTarget target, int level, PixelInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data) {
            glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
        }

        public static void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, int imageSize, IntPtr data) {
            glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
        }

        public static void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, int imageSize, IntPtr data) {
            glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        public static void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, int imageSize, IntPtr data) {
            glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        public static void CompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, uint format, int imageSize, IntPtr data) {
            glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);
        }

        public static void CompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, uint format, int imageSize, IntPtr data) {
            glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
        }

        public static void CompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, int imageSize, IntPtr data) {
            glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }

        public static void CopyBufferSubData(uint readTarget, uint writeTarget, int readOffset, int writeOffset, int size) {
            glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
        }

        public static void CopyImageSubData(uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) {
            glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }

        public static void CopyNamedBufferSubData(uint readBuffer, uint writeBuffer, int readOffset, int writeOffset, int size) {
            glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
        }

        public static void CopyTexImage1D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int border) {
            glCopyTexImage1D(target, level, internalformat, x, y, width, border);
        }

        public static void CopyTexImage2D(TextureTarget target, int level, PixelInternalFormat internalformat, int x, int y, int width, int height, int border) {
            glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
        }

        public static void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width) {
            glCopyTexSubImage1D(target, level, xoffset, x, y, width);
        }

        public static void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
            glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
        }

        public static void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
            glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }

        public static void CopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width) {
            glCopyTextureSubImage1D(texture, level, xoffset, x, y, width);
        }

        public static void CopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height) {
            glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
        }

        public static void CopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) {
            glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
        }

        public static void CreateBuffers(int n, uint[] buffers) {
            glCreateBuffers(n, buffers);
        }

        public static void CreateFramebuffers(int n, uint[] framebuffers) {
            glCreateFramebuffers(n, framebuffers);
        }

        public static uint CreateProgram() {
            return glCreateProgram();
        }

        public static void CreateProgramPipelines(int n, uint[] pipelines) {
            glCreateProgramPipelines(n, pipelines);
        }

        public static void CreateQueries(QueryMode target, int n, uint[] ids) {
            glCreateQueries(target, n, ids);
        }

        public static void CreateRenderbuffers(int n, uint[] renderbuffers) {
            glCreateRenderbuffers(n, renderbuffers);
        }

        public static void CreateSamplers(int n, uint[] samplers) {
            glCreateSamplers(n, samplers);
        }

        public static uint CreateShader(ShaderType type) {
            return glCreateShader(type);
        }

        public static uint CreateShaderProgramv(ShaderType type, int count, string[] strings) {
            return glCreateShaderProgramv(type, count, strings);
        }

        public static void CreateTextures(TextureTarget target, int n, uint[] textures) {
            glCreateTextures(target, n, textures);
        }

        public static void CreateTransformFeedbacks(int n, uint[] ids) {
            glCreateTransformFeedbacks(n, ids);
        }

        public static void CreateVertexArrays(int n, uint[] arrays) {
            glCreateVertexArrays(n, arrays);
        }

        public static void CullFace(Face mode) {
            glCullFace(mode);
        }

        public static void DebugMessageCallback(DebugDelegate callback, IntPtr userParam) {
            glDebugMessageCallback(callback, userParam);
        }

        public static void DebugMessageControl(uint source, uint type, uint severity, int count, uint[] ids, bool enabled) {
            glDebugMessageControl(source, type, severity, count, ids, enabled);
        }

        public static void DebugMessageInsert(uint source, uint type, uint id, uint severity, int length, string buf) {
            glDebugMessageInsert(source, type, id, severity, length, buf);
        }

        public static void DeleteBuffers(int n, uint[] buffers) {
            glDeleteBuffers(n, buffers);
        }

        public static void DeleteFramebuffers(int n, uint[] framebuffers) {
            glDeleteFramebuffers(n, framebuffers);
        }

        public static void DeleteProgram(uint program) {
            glDeleteProgram(program);
        }

        public static void DeleteProgramPipelines(int n, uint[] pipelines) {
            glDeleteProgramPipelines(n, pipelines);
        }

        public static void DeleteQueries(int n, uint[] ids) {
            glDeleteQueries(n, ids);
        }

        public static void DeleteRenderbuffers(int n, uint[] renderbuffers) {
            glDeleteRenderbuffers(n, renderbuffers);
        }

        public static void DeleteSamplers(int count, uint[] samplers) {
            glDeleteSamplers(count, samplers);
        }

        public static void DeleteShader(uint shader) {
            glDeleteShader(shader);
        }

        public static void DeleteSync(GLsync sync) {
            glDeleteSync(sync);
        }

        public static void DeleteTextures(int n, uint[] textures) {
            glDeleteTextures(n, textures);
        }

        public static void DeleteTransformFeedbacks(int n, uint[] ids) {
            glDeleteTransformFeedbacks(n, ids);
        }

        public static void DeleteVertexArrays(int n, uint[] arrays) {
            glDeleteVertexArrays(n, arrays);
        }

        public static void DepthFunc(DepthFunction func) {
            glDepthFunc(func);
        }

        public static void DepthMask(bool flag) {
            glDepthMask(flag);
        }

        public static void DepthRange(double near, double far) {
            glDepthRange(near, far);
        }

        public static void DepthRangeArrayv(uint first, int count, double[] v) {
            glDepthRangeArrayv(first, count, v);
        }

        public static void DepthRangef(float n, float f) {
            glDepthRangef(n, f);
        }

        public static void DepthRangeIndexed(uint index, double n, double f) {
            glDepthRangeIndexed(index, n, f);
        }

        public static void DetachShader(uint program, uint shader) {
            glDetachShader(program, shader);
        }

        public static void Disable(EnableCap cap) {
            glDisable(cap);
        }

        public static void Disablei(uint target, uint index) {
            glDisablei(target, index);
        }

        public static void DisableVertexArrayAttrib(uint vaobj, uint index) {
            glDisableVertexArrayAttrib(vaobj, index);
        }

        public static void DisableVertexAttribArray(uint index) {
            glDisableVertexAttribArray(index);
        }

        public static void DispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z) {
            glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
        }

        public static void DispatchComputeIndirect(int indirect) {
            glDispatchComputeIndirect(indirect);
        }

        public static void DrawArrays(PrimitiveType mode, int first, int count) {
            glDrawArrays(mode, first, count);
        }

        public static void DrawArraysIndirect(PrimitiveType mode, IntPtr indirect) {
            glDrawArraysIndirect(mode, indirect);
        }

        public static void DrawArraysInstanced(PrimitiveType mode, int first, int count, int instancecount) {
            glDrawArraysInstanced(mode, first, count, instancecount);
        }

        public static void DrawArraysInstancedBaseInstance(PrimitiveType mode, int first, int count, int instancecount, uint baseinstance) {
            glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
        }

        public static void DrawBuffer(DrawBufferMode buf) {
            glDrawBuffer(buf);
        }

        public static void DrawBuffers(int n, DrawBufferMode[] bufs) {
            glDrawBuffers(n, bufs);
        }

        public static void DrawElements(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices) {
            glDrawElements(mode, count, type, indices);
        }

        public static void DrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int basevertex) {
            glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
        }

        public static void DrawElementsIndirect(PrimitiveType mode, uint type, IntPtr indirect) {
            glDrawElementsIndirect(mode, type, indirect);
        }

        public static void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount) {
            glDrawElementsInstanced(mode, count, type, indices, instancecount);
        }

        public static void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, uint type, IntPtr indices, int instancecount, uint baseinstance) {
            glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
        }

        public static void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex) {
            glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
        }

        public static void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, uint type, IntPtr indices, int instancecount, int basevertex, uint baseinstance) {
            glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
        }

        public static void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices) {
            glDrawRangeElements(mode, start, end, count, type, indices);
        }

        public static void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices, int basevertex) {
            glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
        }

        public static void DrawTransformFeedback(PrimitiveType mode, uint id) {
            glDrawTransformFeedback(mode, id);
        }

        public static void DrawTransformFeedbackInstanced(PrimitiveType mode, uint id, int instancecount) {
            glDrawTransformFeedbackInstanced(mode, id, instancecount);
        }

        public static void DrawTransformFeedbackStream(PrimitiveType mode, uint id, uint stream) {
            glDrawTransformFeedbackStream(mode, id, stream);
        }

        public static void DrawTransformFeedbackStreamInstanced(PrimitiveType mode, uint id, uint stream, int instancecount) {
            glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
        }

        public static void Enable(EnableCap cap) {
            glEnable(cap);
        }

        public static void Enablei(uint target, uint index) {
            glEnablei(target, index);
        }

        public static void EnableVertexArrayAttrib(uint vaobj, uint index) {
            glEnableVertexArrayAttrib(vaobj, index);
        }

        public static void EnableVertexAttribArray(uint index) {
            glEnableVertexAttribArray(index);
        }

        public static void EndConditionalRender() {
            glEndConditionalRender();
        }

        public static void EndQuery(uint target) {
            glEndQuery(target);
        }

        public static void EndQueryIndexed(uint target, uint index) {
            glEndQueryIndexed(target, index);
        }

        public static void EndTransformFeedback() {
            glEndTransformFeedback();
        }

        public static IntPtr FenceSync(uint condition, uint flags) {
            return glFenceSync(condition, flags);
        }

        public static void Finish() {
            glFinish();
        }

        public static void Flush() {
            glFlush();
        }

        public static void FlushMappedBufferRange(BufferTarget target, int offset, int length) {
            glFlushMappedBufferRange(target, offset, length);
        }

        public static void FlushMappedNamedBufferRange(uint buffer, int offset, int length) {
            glFlushMappedNamedBufferRange(buffer, offset, length);
        }

        public static void FramebufferParameteri(uint target, uint pname, int param) {
            glFramebufferParameteri(target, pname, param);
        }

        public static void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer) {
            glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
        }

        public static void FramebufferTexture(uint target, uint attachment, uint texture, int level) {
            glFramebufferTexture(target, attachment, texture, level);
        }

        public static void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, uint textarget, uint texture, int level) {
            glFramebufferTexture1D(target, attachment, textarget, texture, level);
        }

        public static void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, uint textarget, uint texture, int level) {
            glFramebufferTexture2D(target, attachment, textarget, texture, level);
        }

        public static void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, uint textarget, uint texture, int level, int zoffset) {
            glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
        }

        public static void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer) {
            glFramebufferTextureLayer(target, attachment, texture, level, layer);
        }

        public static void FrontFace(FrontFaceDirection mode) {
            glFrontFace(mode);
        }

        public static void GenBuffers(int n, uint[] buffers) {
            glGenBuffers(n, buffers);
        }

        public static void GenerateMipmap(uint target) {
            glGenerateMipmap(target);
        }

        public static void GenerateTextureMipmap(uint texture) {
            glGenerateTextureMipmap(texture);
        }

        public static void GenFramebuffers(int n, uint[] framebuffers) {
            glGenFramebuffers(n, framebuffers);
        }

        public static void GenProgramPipelines(int n, uint[] pipelines) {
            glGenProgramPipelines(n, pipelines);
        }

        public static void GenQueries(int n, uint[] ids) {
            glGenQueries(n, ids);
        }

        public static void GenRenderbuffers(int n, uint[] renderbuffers) {
            glGenRenderbuffers(n, renderbuffers);
        }

        public static void GenSamplers(int count, uint[] samplers) {
            glGenSamplers(count, samplers);
        }

        public static void GenTextures(int n, uint[] textures) {
            glGenTextures(n, textures);
        }

        public static void GenTransformFeedbacks(int n, uint[] ids) {
            glGenTransformFeedbacks(n, ids);
        }

        public static void GenVertexArrays(int n, uint[] arrays) {
            glGenVertexArrays(n, arrays);
        }

        public static void GetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, uint pname, int[] _params) {
            glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, _params);
        }

        public static void GetActiveAttrib(uint program, uint index, int bufSize, ref int length, ref int size, ref uint type, StringBuilder name) {
            glGetActiveAttrib(program, index, bufSize, ref length, ref size, ref type, name);
        }

        public static void GetActiveSubroutineName(uint program, uint shadertype, uint index, int bufsize, ref int length, StringBuilder name) {
            glGetActiveSubroutineName(program, shadertype, index, bufsize, ref length, name);
        }

        public static void GetActiveSubroutineUniformiv(uint program, uint shadertype, uint index, uint pname, int[] values) {
            glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
        }

        public static void GetActiveSubroutineUniformName(uint program, uint shadertype, uint index, int bufsize, ref int length, StringBuilder name) {
            glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, ref length, name);
        }

        public static void GetActiveUniform(uint program, uint index, int bufSize, ref int length, ref int size, ref uint type, StringBuilder name) {
            glGetActiveUniform(program, index, bufSize, ref length, ref size, ref type, name);
        }

        public static void GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, uint pname, int[] _params) {
            glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, _params);
        }

        public static void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, ref int length, StringBuilder uniformBlockName) {
            glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, ref length, uniformBlockName);
        }

        public static void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, ref int length, StringBuilder uniformName) {
            glGetActiveUniformName(program, uniformIndex, bufSize, ref length, uniformName);
        }

        public static void GetActiveUniformsiv(uint program, int uniformCount, uint[] uniformIndices, uint pname, int[] _params) {
            glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, _params);
        }

        public static void GetAttachedShaders(uint program, int maxCount, ref int count, uint[] shaders) {
            glGetAttachedShaders(program, maxCount, ref count, shaders);
        }

        public static int GetAttribLocation(uint program, string name) {
            return glGetAttribLocation(program, name);
        }

        public static void GetBooleani_v(uint target, uint index, bool[] data) {
            glGetBooleani_v(target, index, data);
        }

        public static void GetBooleanv(GetPName pname, bool[] data) {
            glGetBooleanv(pname, data);
        }

        public static void GetBufferParameteri64v(BufferTarget target, BufferPName pname, long[] _params) {
            glGetBufferParameteri64v(target, pname, _params);
        }

        public static void GetBufferParameteriv(BufferTarget target, BufferPName pname, int[] _params) {
            glGetBufferParameteriv(target, pname, _params);
        }

        public static void GetBufferPointerv(BufferTarget target, BufferPName pname, IntPtr _params) {
            glGetBufferPointerv(target, pname, _params);
        }

        public static void GetBufferSubData(BufferTarget target, int offset, int size, IntPtr data) {
            glGetBufferSubData(target, offset, size, data);
        }

        public static void GetCompressedTexImage(TextureTarget target, int level, IntPtr img) {
            glGetCompressedTexImage(target, level, img);
        }

        public static void GetCompressedTextureImage(uint texture, int level, int bufSize, IntPtr pixels) {
            glGetCompressedTextureImage(texture, level, bufSize, pixels);
        }

        public static void GetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels) {
            glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
        }

        public static uint GetDebugMessageLog(uint count, int bufSize, uint[] sources, uint[] types, uint[] ids, uint[] severities, int[] lengths, StringBuilder messageLog) {
            return glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
        }

        public static void GetDoublei_v(uint target, uint index, double[] data) {
            glGetDoublei_v(target, index, data);
        }

        public static void GetDoublev(GetPName pname, double[] data) {
            glGetDoublev(pname, data);
        }

        public static uint GetError() {
            return glGetError();
        }

        public static void GetFloati_v(TypeEnum target, uint index, float[] data) {
            glGetFloati_v(target, index, data);
        }

        public static void GetFloatv(GetPName pname, float[] data) {
            glGetFloatv(pname, data);
        }

        public static int GetFragDataIndex(uint program, string name) {
            return glGetFragDataIndex(program, name);
        }

        public static int GetFragDataLocation(uint program, string name) {
            return glGetFragDataLocation(program, name);
        }

        public static void GetFramebufferAttachmentParameteriv(FramebufferTarget target, FramebufferAttachment attachment, uint pname, int[] _params) {
            glGetFramebufferAttachmentParameteriv(target, attachment, pname, _params);
        }

        public static void GetFramebufferParameteriv(uint target, uint pname, int[] _params) {
            glGetFramebufferParameteriv(target, pname, _params);
        }

        public static uint GetGraphicsResetStatus() {
            return glGetGraphicsResetStatus();
        }

        public static void GetInteger64i_v(uint target, uint index, long[] data) {
            glGetInteger64i_v(target, index, data);
        }

        public static void GetInteger64v(uint pname, long[] data) {
            glGetInteger64v(pname, data);
        }

        public static void GetIntegeri_v(uint target, uint index, int[] data) {
            glGetIntegeri_v(target, index, data);
        }

        public static void GetIntegerv(GetPName pname, int[] data) {
            glGetIntegerv(pname, data);
        }

        public static void GetInternalformati64v(uint target, uint internalformat, uint pname, int bufSize, long[] _params) {
            glGetInternalformati64v(target, internalformat, pname, bufSize, _params);
        }

        public static void GetInternalformativ(uint target, uint internalformat, uint pname, int bufSize, int[] _params) {
            glGetInternalformativ(target, internalformat, pname, bufSize, _params);
        }

        public static void GetMultisamplefv(uint pname, uint index, float[] val) {
            glGetMultisamplefv(pname, index, val);
        }

        public static void GetNamedBufferParameteri64v(uint buffer, BufferPName pname, out long _params) {
            glGetNamedBufferParameteri64v(buffer, pname, out _params);
        }

        public static void GetNamedBufferParameteriv(uint buffer, BufferPName pname, out int _params) {
            glGetNamedBufferParameteriv(buffer, pname, out _params);
        }

        public static void GetNamedBufferPointerv(uint buffer, uint pname, IntPtr _params) {
            glGetNamedBufferPointerv(buffer, pname, _params);
        }

        public static void GetNamedBufferSubData(uint buffer, int offset, int size, IntPtr data) {
            glGetNamedBufferSubData(buffer, offset, size, data);
        }

        public static void GetNamedFramebufferAttachmentParameteriv(uint framebuffer, uint attachment, uint pname, out int _params) {
            glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, out _params);
        }

        public static void GetNamedFramebufferParameteriv(uint framebuffer, uint pname, out int param) {
            glGetNamedFramebufferParameteriv(framebuffer, pname, out param);
        }

        public static void GetNamedRenderbufferParameteriv(uint renderbuffer, uint pname, out int _params) {
            glGetNamedRenderbufferParameteriv(renderbuffer, pname, out _params);
        }

        public static void GetnCompressedTexImage(uint target, int lod, int bufSize, IntPtr pixels) {
            glGetnCompressedTexImage(target, lod, bufSize, pixels);
        }

        public static void GetnTexImage(uint target, int level, uint format, uint type, int bufSize, IntPtr pixels) {
            glGetnTexImage(target, level, format, type, bufSize, pixels);
        }

        public static void GetnUniformdv(uint program, int location, int bufSize, out double _params) {
            glGetnUniformdv(program, location, bufSize, out _params);
        }

        public static void GetnUniformfv(uint program, int location, int bufSize, out float _params) {
            glGetnUniformfv(program, location, bufSize, out _params);
        }

        public static void GetnUniformiv(uint program, int location, int bufSize, out int _params) {
            glGetnUniformiv(program, location, bufSize, out _params);
        }

        public static void GetnUniformuiv(uint program, int location, int bufSize, out uint _params) {
            glGetnUniformuiv(program, location, bufSize, out _params);
        }

        public static void GetObjectLabel(uint identifier, uint name, int bufSize, ref int length, StringBuilder label) {
            glGetObjectLabel(identifier, name, bufSize, ref length, label);
        }

        public static void GetObjectPtrLabel(IntPtr ptr, int bufSize, ref int length, StringBuilder label) {
            glGetObjectPtrLabel(ptr, bufSize, ref length, label);
        }

        public static void GetPointerv(GetPointervPName pname, IntPtr _params) {
            glGetPointerv(pname, _params);
        }

        public static void GetProgramBinary(uint program, int bufSize, ref int length, ref uint binaryFormat, IntPtr binary) {
            glGetProgramBinary(program, bufSize, ref length, ref binaryFormat, binary);
        }

        public static void GetProgramInfoLog(uint program, int bufSize, ref int length, StringBuilder infoLog) {
            glGetProgramInfoLog(program, bufSize, ref length, infoLog);
        }

        public static void GetProgramInterfaceiv(uint program, uint programInterface, uint pname, int[] _params) {
            glGetProgramInterfaceiv(program, programInterface, pname, _params);
        }

        public static void GetProgramiv(uint program, ProgramParameter pname, int[] _params) {
            glGetProgramiv(program, pname, _params);
        }

        public static void GetProgramPipelineInfoLog(uint pipeline, int bufSize, ref int length, StringBuilder infoLog) {
            glGetProgramPipelineInfoLog(pipeline, bufSize, ref length, infoLog);
        }

        public static void GetProgramPipelineiv(uint pipeline, uint pname, int[] _params) {
            glGetProgramPipelineiv(pipeline, pname, _params);
        }

        public static uint GetProgramResourceIndex(uint program, uint programInterface, string name) {
            return glGetProgramResourceIndex(program, programInterface, name);
        }

        public static void GetProgramResourceiv(uint program, uint programInterface, uint index, int propCount, uint[] props, int bufSize, ref int length, int[] _params) {
            glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, ref length, _params);
        }

        public static int GetProgramResourceLocation(uint program, uint programInterface, string name) {
            return glGetProgramResourceLocation(program, programInterface, name);
        }

        public static int GetProgramResourceLocationIndex(uint program, uint programInterface, string name) {
            return glGetProgramResourceLocationIndex(program, programInterface, name);
        }

        public static void GetProgramResourceName(uint program, uint programInterface, uint index, int bufSize, ref int length, StringBuilder name) {
            glGetProgramResourceName(program, programInterface, index, bufSize, ref length, name);
        }

        public static void GetProgramStageiv(uint program, uint shadertype, uint pname, ref int values) {
            glGetProgramStageiv(program, shadertype, pname, ref values);
        }

        public static void GetQueryBufferObjecti64v(uint id, uint buffer, uint pname, int offset) {
            glGetQueryBufferObjecti64v(id, buffer, pname, offset);
        }

        public static void GetQueryBufferObjectiv(uint id, uint buffer, uint pname, int offset) {
            glGetQueryBufferObjectiv(id, buffer, pname, offset);
        }

        public static void GetQueryBufferObjectui64v(uint id, uint buffer, uint pname, int offset) {
            glGetQueryBufferObjectui64v(id, buffer, pname, offset);
        }

        public static void GetQueryBufferObjectuiv(uint id, uint buffer, uint pname, int offset) {
            glGetQueryBufferObjectuiv(id, buffer, pname, offset);
        }

        public static void GetQueryIndexediv(uint target, uint index, uint pname, int[] _params) {
            glGetQueryIndexediv(target, index, pname, _params);
        }

        public static void GetQueryiv(uint target, uint pname, int[] _params) {
            glGetQueryiv(target, pname, _params);
        }

        public static void GetQueryObjecti64v(uint id, uint pname, long[] _params) {
            glGetQueryObjecti64v(id, pname, _params);
        }

        public static void GetQueryObjectiv(uint id, uint pname, int[] _params) {
            glGetQueryObjectiv(id, pname, _params);
        }

        public static void GetQueryObjectui64v(uint id, uint pname, ulong[] _params) {
            glGetQueryObjectui64v(id, pname, _params);
        }

        public static void GetQueryObjectuiv(uint id, uint pname, uint[] _params) {
            glGetQueryObjectuiv(id, pname, _params);
        }

        public static void GetRenderbufferParameteriv(RenderbufferTarget target, uint pname, int[] _params) {
            glGetRenderbufferParameteriv(target, pname, _params);
        }

        public static void GetSamplerParameterfv(uint sampler, uint pname, float[] _params) {
            glGetSamplerParameterfv(sampler, pname, _params);
        }

        public static void GetSamplerParameterIiv(uint sampler, uint pname, int[] _params) {
            glGetSamplerParameterIiv(sampler, pname, _params);
        }

        public static void GetSamplerParameterIuiv(uint sampler, uint pname, uint[] _params) {
            glGetSamplerParameterIuiv(sampler, pname, _params);
        }

        public static void GetSamplerParameteriv(uint sampler, uint pname, int[] _params) {
            glGetSamplerParameteriv(sampler, pname, _params);
        }

        public static void GetShaderInfoLog(uint shader, int bufSize, ref int length, StringBuilder infoLog) {
            glGetShaderInfoLog(shader, bufSize, ref length, infoLog);
        }

        public static void GetShaderiv(uint shader, ShaderParameter pname, int[] _params) {
            glGetShaderiv(shader, pname, _params);
        }

        public static void GetShaderPrecisionFormat(uint shadertype, uint precisiontype, int[] range, int[] precision) {
            glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
        }

        public static void GetShaderSource(uint shader, int bufSize, ref int length, StringBuilder source) {
            glGetShaderSource(shader, bufSize, ref length, source);
        }

        public static byte GetString(StringName name) {
            return glGetString(name);
        }

        public static byte GetStringi(uint name, uint index) {
            return glGetStringi(name, index);
        }

        public static uint GetSubroutineIndex(uint program, uint shadertype, string name) {
            return glGetSubroutineIndex(program, shadertype, name);
        }

        public static int GetSubroutineUniformLocation(uint program, uint shadertype, string name) {
            return glGetSubroutineUniformLocation(program, shadertype, name);
        }

        public static void GetSynciv(GLsync sync, uint pname, int bufSize, ref int length, int[] values) {
            glGetSynciv(sync, pname, bufSize, ref length, values);
        }

        public static void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels) {
            glGetTexImage(target, level, format, type, pixels);
        }

        public static void GetTexLevelParameterfv(TextureTarget target, int level, GetTextureParameter pname, float[] _params) {
            glGetTexLevelParameterfv(target, level, pname, _params);
        }

        public static void GetTexLevelParameteriv(TextureTarget target, int level, GetTextureParameter pname, int[] _params) {
            glGetTexLevelParameteriv(target, level, pname, _params);
        }

        public static void GetTexParameterfv(TextureTarget target, GetTextureParameter pname, float[] _params) {
            glGetTexParameterfv(target, pname, _params);
        }

        public static void GetTexParameterIiv(TextureTarget target, GetTextureParameter pname, int[] _params) {
            glGetTexParameterIiv(target, pname, _params);
        }

        public static void GetTexParameterIuiv(TextureTarget target, GetTextureParameter pname, uint[] _params) {
            glGetTexParameterIuiv(target, pname, _params);
        }

        public static void GetTexParameteriv(TextureTarget target, GetTextureParameter pname, int[] _params) {
            glGetTexParameteriv(target, pname, _params);
        }

        public static void GetTextureImage(uint texture, int level, uint format, uint type, int bufSize, IntPtr pixels) {
            glGetTextureImage(texture, level, format, type, bufSize, pixels);
        }

        public static void GetTextureLevelParameterfv(uint texture, int level, uint pname, out float _params) {
            glGetTextureLevelParameterfv(texture, level, pname, out _params);
        }

        public static void GetTextureLevelParameteriv(uint texture, int level, uint pname, out int _params) {
            glGetTextureLevelParameteriv(texture, level, pname, out _params);
        }

        public static void GetTextureParameterfv(uint texture, uint pname, out float _params) {
            glGetTextureParameterfv(texture, pname, out _params);
        }

        public static void GetTextureParameterIiv(uint texture, uint pname, out int _params) {
            glGetTextureParameterIiv(texture, pname, out _params);
        }

        public static void GetTextureParameterIuiv(uint texture, uint pname, out uint _params) {
            glGetTextureParameterIuiv(texture, pname, out _params);
        }

        public static void GetTextureParameteriv(uint texture, uint pname, out int _params) {
            glGetTextureParameteriv(texture, pname, out _params);
        }

        public static void GetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, int bufSize, IntPtr pixels) {
            glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
        }

        public static void GetTransformFeedbacki_v(uint xfb, uint pname, uint index, out int param) {
            glGetTransformFeedbacki_v(xfb, pname, index, out param);
        }

        public static void GetTransformFeedbacki64_v(uint xfb, uint pname, uint index, out long param) {
            glGetTransformFeedbacki64_v(xfb, pname, index, out param);
        }

        public static void GetTransformFeedbackiv(uint xfb, uint pname, out int param) {
            glGetTransformFeedbackiv(xfb, pname, out param);
        }

        public static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, ref int length, ref int size, ref uint type, StringBuilder name) {
            glGetTransformFeedbackVarying(program, index, bufSize, ref length, ref size, ref type, name);
        }

        public static uint GetUniformBlockIndex(uint program, string uniformBlockName) {
            return glGetUniformBlockIndex(program, uniformBlockName);
        }

        public static void GetUniformdv(uint program, int location, double[] _params) {
            glGetUniformdv(program, location, _params);
        }

        public static void GetUniformfv(uint program, int location, float[] _params) {
            glGetUniformfv(program, location, _params);
        }

        public static void GetUniformIndices(uint program, int uniformCount, string[] uniformNames, uint[] uniformIndices) {
            glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
        }

        public static void GetUniformiv(uint program, int location, int[] _params) {
            glGetUniformiv(program, location, _params);
        }

        public static int GetUniformLocation(uint program, string name) {
            return glGetUniformLocation(program, name);
        }

        public static void GetUniformSubroutineuiv(uint shadertype, int location, ref uint _params) {
            glGetUniformSubroutineuiv(shadertype, location, ref _params);
        }

        public static void GetUniformuiv(uint program, int location, uint[] _params) {
            glGetUniformuiv(program, location, _params);
        }

        public static void GetVertexArrayIndexed64iv(uint vaobj, uint index, uint pname, out long param) {
            glGetVertexArrayIndexed64iv(vaobj, index, pname, out param);
        }

        public static void GetVertexArrayIndexediv(uint vaobj, uint index, uint pname, out int param) {
            glGetVertexArrayIndexediv(vaobj, index, pname, out param);
        }

        public static void GetVertexArrayiv(uint vaobj, uint pname, out int param) {
            glGetVertexArrayiv(vaobj, pname, out param);
        }

        public static void GetVertexAttribdv(uint index, VertexAttribProperty pname, double[] _params) {
            glGetVertexAttribdv(index, pname, _params);
        }

        public static void GetVertexAttribfv(uint index, VertexAttribProperty pname, float[] _params) {
            glGetVertexAttribfv(index, pname, _params);
        }

        public static void GetVertexAttribIiv(uint index, VertexAttribEnum pname, ref int _params) {
            glGetVertexAttribIiv(index, pname, ref _params);
        }

        public static void GetVertexAttribIuiv(uint index, VertexAttribEnum pname, ref uint _params) {
            glGetVertexAttribIuiv(index, pname, ref _params);
        }

        public static void GetVertexAttribiv(uint index, VertexAttribProperty pname, int[] _params) {
            glGetVertexAttribiv(index, pname, _params);
        }

        public static void GetVertexAttribLdv(uint index, uint pname, double[] _params) {
            glGetVertexAttribLdv(index, pname, _params);
        }

        public static void GetVertexAttribPointerv(uint index, VertexAttribPointerProperty pname, IntPtr pointer) {
            glGetVertexAttribPointerv(index, pname, pointer);
        }

        public static void Hint(HintTarget target, HintMode mode) {
            glHint(target, mode);
        }

        public static void InvalidateBufferData(uint buffer) {
            glInvalidateBufferData(buffer);
        }

        public static void InvalidateBufferSubData(uint buffer, int offset, int length) {
            glInvalidateBufferSubData(buffer, offset, length);
        }

        public static void InvalidateFramebuffer(uint target, int numAttachments, uint[] attachments) {
            glInvalidateFramebuffer(target, numAttachments, attachments);
        }

        public static void InvalidateNamedFramebufferData(uint framebuffer, int numAttachments, ref uint attachments) {
            glInvalidateNamedFramebufferData(framebuffer, numAttachments, ref attachments);
        }

        public static void InvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, ref uint attachments, int x, int y, int width, int height) {
            glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, ref attachments, x, y, width, height);
        }

        public static void InvalidateSubFramebuffer(uint target, int numAttachments, uint[] attachments, int x, int y, int width, int height) {
            glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
        }

        public static void InvalidateTexImage(uint texture, int level) {
            glInvalidateTexImage(texture, level);
        }

        public static void InvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth) {
            glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
        }

        public static bool IsBuffer(uint buffer) {
            return glIsBuffer(buffer);
        }

        public static bool IsEnabled(EnableCap cap) {
            return glIsEnabled(cap);
        }

        public static bool IsEnabledi(uint target, uint index) {
            return glIsEnabledi(target, index);
        }

        public static bool IsFramebuffer(uint framebuffer) {
            return glIsFramebuffer(framebuffer);
        }

        public static bool IsProgram(uint program) {
            return glIsProgram(program);
        }

        public static bool IsProgramPipeline(uint pipeline) {
            return glIsProgramPipeline(pipeline);
        }

        public static bool IsQuery(uint id) {
            return glIsQuery(id);
        }

        public static bool IsRenderbuffer(uint renderbuffer) {
            return glIsRenderbuffer(renderbuffer);
        }

        public static bool IsSampler(uint sampler) {
            return glIsSampler(sampler);
        }

        public static bool IsShader(uint shader) {
            return glIsShader(shader);
        }

        public static bool IsSync(GLsync sync) {
            return glIsSync(sync);
        }

        public static bool IsTexture(uint texture) {
            return glIsTexture(texture);
        }

        public static bool IsTransformFeedback(uint id) {
            return glIsTransformFeedback(id);
        }

        public static bool IsVertexArray(uint array) {
            return glIsVertexArray(array);
        }

        public static void LineWidth(float width) {
            glLineWidth(width);
        }

        public static void LinkProgram(uint program) {
            glLinkProgram(program);
        }

        public static void LogicOp(LogicOp opcode) {
            glLogicOp(opcode);
        }

        public static IntPtr MapBuffer(BufferTarget target, BufferAccessMask access) {
            return glMapBuffer(target, access);
        }

        public static IntPtr MapBufferRange(BufferTarget target, int offset, int length, BufferAccessMask access) {
            return glMapBufferRange(target, offset, length, access);
        }

        public static IntPtr MapNamedBuffer(uint buffer, BufferAccessMask access) {
            return glMapNamedBuffer(buffer, access);
        }

        public static IntPtr MapNamedBufferRange(uint buffer, int offset, int length, BufferAccessMask access) {
            return glMapNamedBufferRange(buffer, offset, length, access);
        }

        public static void MemoryBarrier(uint barriers) {
            glMemoryBarrier(barriers);
        }

        public static void MemoryBarrierByRegion(uint barriers) {
            glMemoryBarrierByRegion(barriers);
        }

        public static void MinSampleShading(float value) {
            glMinSampleShading(value);
        }

        public static void MultiDrawArrays(PrimitiveType mode, int[] first, int[] count, int drawcount) {
            glMultiDrawArrays(mode, first, count, drawcount);
        }

        public static void MultiDrawArraysIndirect(uint mode, IntPtr indirect, int drawcount, int stride) {
            glMultiDrawArraysIndirect(mode, indirect, drawcount, stride);
        }

        public static void MultiDrawElements(PrimitiveType mode, int[] count, DrawElementsType type, IntPtr indices, int drawcount) {
            glMultiDrawElements(mode, count, type, indices, drawcount);
        }

        public static void MultiDrawElementsBaseVertex(uint mode, int[] count, DrawElementsType type, IntPtr indices, int drawcount, int[] basevertex) {
            glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);
        }

        public static void MultiDrawElementsIndirect(uint mode, uint type, IntPtr indirect, int drawcount, int stride) {
            glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
        }

        public static void NamedBufferData(uint buffer, int size, IntPtr data, BufferUsage usage) {
            glNamedBufferData(buffer, size, data, usage);
        }

        public static void NamedBufferStorage(uint buffer, int size, IntPtr data, uint flags) {
            glNamedBufferStorage(buffer, size, data, flags);
        }

        public static void NamedBufferSubData(uint buffer, int offset, int size, IntPtr data) {
            glNamedBufferSubData(buffer, offset, size, data);
        }

        public static void NamedFramebufferDrawBuffer(uint framebuffer, uint buf) {
            glNamedFramebufferDrawBuffer(framebuffer, buf);
        }

        public static void NamedFramebufferDrawBuffers(uint framebuffer, int n, ref uint bufs) {
            glNamedFramebufferDrawBuffers(framebuffer, n, ref bufs);
        }

        public static void NamedFramebufferParameteri(uint framebuffer, uint pname, int param) {
            glNamedFramebufferParameteri(framebuffer, pname, param);
        }

        public static void NamedFramebufferReadBuffer(uint framebuffer, uint src) {
            glNamedFramebufferReadBuffer(framebuffer, src);
        }

        public static void NamedFramebufferRenderbuffer(uint framebuffer, uint attachment, uint renderbuffertarget, uint renderbuffer) {
            glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
        }

        public static void NamedFramebufferTexture(uint framebuffer, uint attachment, uint texture, int level) {
            glNamedFramebufferTexture(framebuffer, attachment, texture, level);
        }

        public static void NamedFramebufferTextureLayer(uint framebuffer, uint attachment, uint texture, int level, int layer) {
            glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
        }

        public static void NamedRenderbufferStorage(uint renderbuffer, uint internalformat, int width, int height) {
            glNamedRenderbufferStorage(renderbuffer, internalformat, width, height);
        }

        public static void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, uint internalformat, int width, int height) {
            glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
        }

        public static void ObjectLabel(uint identifier, uint name, int length, string label) {
            glObjectLabel(identifier, name, length, label);
        }

        public static void ObjectPtrLabel(IntPtr ptr, int length, string label) {
            glObjectPtrLabel(ptr, length, label);
        }

        public static void PatchParameterfv(uint pname, float[] values) {
            glPatchParameterfv(pname, values);
        }

        public static void PatchParameteri(uint pname, int value) {
            glPatchParameteri(pname, value);
        }

        public static void PauseTransformFeedback() {
            glPauseTransformFeedback();
        }

        public static void PixelStoref(PixelStoreParameter pname, float param) {
            glPixelStoref(pname, param);
        }

        public static void PixelStorei(PixelStoreParameter pname, int param) {
            glPixelStorei(pname, param);
        }

        public static void PointParameterf(PointParameterName pname, float param) {
            glPointParameterf(pname, param);
        }

        public static void PointParameterfv(PointParameterName pname, float[] _params) {
            glPointParameterfv(pname, _params);
        }

        public static void PointParameteri(PointParameterName pname, int param) {
            glPointParameteri(pname, param);
        }

        public static void PointParameteriv(PointParameterName pname, int[] _params) {
            glPointParameteriv(pname, _params);
        }

        public static void PointSize(float size) {
            glPointSize(size);
        }

        public static void PolygonMode(Face face, PolygonMode mode) {
            glPolygonMode(face, mode);
        }

        public static void PolygonOffset(float factor, float units) {
            glPolygonOffset(factor, units);
        }

        public static void PopDebugGroup() {
            glPopDebugGroup();
        }

        public static void PrimitiveRestartIndex(uint index) {
            glPrimitiveRestartIndex(index);
        }

        public static void ProgramBinary(uint program, uint binaryFormat, IntPtr binary, int length) {
            glProgramBinary(program, binaryFormat, binary, length);
        }

        public static void ProgramParameteri(uint program, ProgramParameterPName pname, int value) {
            glProgramParameteri(program, pname, value);
        }

        public static void ProgramUniform1d(uint program, int location, double v0) {
            glProgramUniform1d(program, location, v0);
        }

        public static void ProgramUniform1dv(uint program, int location, int count, ref double value) {
            glProgramUniform1dv(program, location, count, ref value);
        }

        public static void ProgramUniform1f(uint program, int location, float v0) {
            glProgramUniform1f(program, location, v0);
        }

        public static void ProgramUniform1fv(uint program, int location, int count, ref float value) {
            glProgramUniform1fv(program, location, count, ref value);
        }

        public static void ProgramUniform1i(uint program, int location, int v0) {
            glProgramUniform1i(program, location, v0);
        }

        public static void ProgramUniform1iv(uint program, int location, int count, ref int value) {
            glProgramUniform1iv(program, location, count, ref value);
        }

        public static void ProgramUniform1ui(uint program, int location, uint v0) {
            glProgramUniform1ui(program, location, v0);
        }

        public static void ProgramUniform1uiv(uint program, int location, int count, ref uint value) {
            glProgramUniform1uiv(program, location, count, ref value);
        }

        public static void ProgramUniform2d(uint program, int location, double v0, double v1) {
            glProgramUniform2d(program, location, v0, v1);
        }

        public static void ProgramUniform2dv(uint program, int location, int count, double[] value) {
            glProgramUniform2dv(program, location, count, value);
        }

        public static void ProgramUniform2f(uint program, int location, float v0, float v1) {
            glProgramUniform2f(program, location, v0, v1);
        }

        public static void ProgramUniform2fv(uint program, int location, int count, float[] value) {
            glProgramUniform2fv(program, location, count, value);
        }

        public static void ProgramUniform2i(uint program, int location, int v0, int v1) {
            glProgramUniform2i(program, location, v0, v1);
        }

        public static void ProgramUniform2iv(uint program, int location, int count, int[] value) {
            glProgramUniform2iv(program, location, count, value);
        }

        public static void ProgramUniform2ui(uint program, int location, uint v0, uint v1) {
            glProgramUniform2ui(program, location, v0, v1);
        }

        public static void ProgramUniform2uiv(uint program, int location, int count, uint[] value) {
            glProgramUniform2uiv(program, location, count, value);
        }

        public static void ProgramUniform3d(uint program, int location, double v0, double v1, double v2) {
            glProgramUniform3d(program, location, v0, v1, v2);
        }

        public static void ProgramUniform3dv(uint program, int location, int count, double[] value) {
            glProgramUniform3dv(program, location, count, value);
        }

        public static void ProgramUniform3f(uint program, int location, float v0, float v1, float v2) {
            glProgramUniform3f(program, location, v0, v1, v2);
        }

        public static void ProgramUniform3fv(uint program, int location, int count, float[] value) {
            glProgramUniform3fv(program, location, count, value);
        }

        public static void ProgramUniform3i(uint program, int location, int v0, int v1, int v2) {
            glProgramUniform3i(program, location, v0, v1, v2);
        }

        public static void ProgramUniform3iv(uint program, int location, int count, int[] value) {
            glProgramUniform3iv(program, location, count, value);
        }

        public static void ProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2) {
            glProgramUniform3ui(program, location, v0, v1, v2);
        }

        public static void ProgramUniform3uiv(uint program, int location, int count, uint[] value) {
            glProgramUniform3uiv(program, location, count, value);
        }

        public static void ProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3) {
            glProgramUniform4d(program, location, v0, v1, v2, v3);
        }

        public static void ProgramUniform4dv(uint program, int location, int count, double[] value) {
            glProgramUniform4dv(program, location, count, value);
        }

        public static void ProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3) {
            glProgramUniform4f(program, location, v0, v1, v2, v3);
        }

        public static void ProgramUniform4fv(uint program, int location, int count, float[] value) {
            glProgramUniform4fv(program, location, count, value);
        }

        public static void ProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3) {
            glProgramUniform4i(program, location, v0, v1, v2, v3);
        }

        public static void ProgramUniform4iv(uint program, int location, int count, int[] value) {
            glProgramUniform4iv(program, location, count, value);
        }

        public static void ProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3) {
            glProgramUniform4ui(program, location, v0, v1, v2, v3);
        }

        public static void ProgramUniform4uiv(uint program, int location, int count, uint[] value) {
            glProgramUniform4uiv(program, location, count, value);
        }

        public static void ProgramUniformMatrix2dv(uint program, int location, int count, bool transpose, double[] value) {
            glProgramUniformMatrix2dv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, float[] value) {
            glProgramUniformMatrix2fv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix2x3dv(uint program, int location, int count, bool transpose, double[] value) {
            glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, float[] value) {
            glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix2x4dv(uint program, int location, int count, bool transpose, double[] value) {
            glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, float[] value) {
            glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix3dv(uint program, int location, int count, bool transpose, double[] value) {
            glProgramUniformMatrix3dv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, float[] value) {
            glProgramUniformMatrix3fv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix3x2dv(uint program, int location, int count, bool transpose, double[] value) {
            glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, float[] value) {
            glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix3x4dv(uint program, int location, int count, bool transpose, double[] value) {
            glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, float[] value) {
            glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix4dv(uint program, int location, int count, bool transpose, double[] value) {
            glProgramUniformMatrix4dv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, float[] value) {
            glProgramUniformMatrix4fv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix4x2dv(uint program, int location, int count, bool transpose, double[] value) {
            glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, float[] value) {
            glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix4x3dv(uint program, int location, int count, bool transpose, double[] value) {
            glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
        }

        public static void ProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, float[] value) {
            glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
        }

        public static void ProvokingVertex(uint mode) {
            glProvokingVertex(mode);
        }

        public static void PushDebugGroup(uint source, uint id, int length, string message) {
            glPushDebugGroup(source, id, length, message);
        }

        public static void QueryCounter(uint id, uint target) {
            glQueryCounter(id, target);
        }

        public static void ReadBuffer(ReadBufferMode src) {
            glReadBuffer(src);
        }

        public static void ReadnPixels(int x, int y, int width, int height, uint format, uint type, int bufSize, IntPtr data) {
            glReadnPixels(x, y, width, height, format, type, bufSize, data);
        }

        public static void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels) {
            glReadPixels(x, y, width, height, format, type, pixels);
        }

        public static void ReleaseShaderCompiler() {
            glReleaseShaderCompiler();
        }

        public static void RenderbufferStorage(RenderbufferTarget target, uint internalformat, int width, int height) {
            glRenderbufferStorage(target, internalformat, width, height);
        }

        public static void RenderbufferStorageMultisample(uint target, int samples, uint internalformat, int width, int height) {
            glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
        }

        public static void ResumeTransformFeedback() {
            glResumeTransformFeedback();
        }

        public static void SampleCoverage(float value, bool invert) {
            glSampleCoverage(value, invert);
        }

        public static void SampleMaski(uint maskNumber, uint mask) {
            glSampleMaski(maskNumber, mask);
        }

        public static void SamplerParameterf(uint sampler, uint pname, float param) {
            glSamplerParameterf(sampler, pname, param);
        }

        public static void SamplerParameterfv(uint sampler, uint pname, float[] param) {
            glSamplerParameterfv(sampler, pname, param);
        }

        public static void SamplerParameteri(uint sampler, uint pname, int param) {
            glSamplerParameteri(sampler, pname, param);
        }

        public static void SamplerParameterIiv(uint sampler, uint pname, int[] param) {
            glSamplerParameterIiv(sampler, pname, param);
        }

        public static void SamplerParameterIuiv(uint sampler, uint pname, uint[] param) {
            glSamplerParameterIuiv(sampler, pname, param);
        }

        public static void SamplerParameteriv(uint sampler, uint pname, int[] param) {
            glSamplerParameteriv(sampler, pname, param);
        }

        public static void Scissor(int x, int y, int width, int height) {
            glScissor(x, y, width, height);
        }

        public static void ScissorArrayv(uint first, int count, int[] v) {
            glScissorArrayv(first, count, v);
        }

        public static void ScissorIndexed(uint index, int left, int bottom, int width, int height) {
            glScissorIndexed(index, left, bottom, width, height);
        }

        public static void ScissorIndexedv(uint index, int[] v) {
            glScissorIndexedv(index, v);
        }

        public static void ShaderBinary(int count, uint[] shaders, uint binaryformat, IntPtr binary, int length) {
            glShaderBinary(count, shaders, binaryformat, binary, length);
        }

        public static void ShaderSource(uint shader, int count, string[] _string, int[] length) {
            glShaderSource(shader, count, _string, length);
        }

        public static void ShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding) {
            glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
        }

        public static void StencilFunc(StencilFunction func, int _ref, uint mask) {
            glStencilFunc(func, _ref, mask);
        }

        public static void StencilFuncSeparate(Face face, StencilFunction func, int _ref, uint mask) {
            glStencilFuncSeparate(face, func, _ref, mask);
        }

        public static void StencilMask(uint mask) {
            glStencilMask(mask);
        }

        public static void StencilMaskSeparate(Face face, uint mask) {
            glStencilMaskSeparate(face, mask);
        }

        public static void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass) {
            glStencilOp(fail, zfail, zpass);
        }

        public static void StencilOpSeparate(Face face, StencilOp sfail, StencilOp dpfail, StencilOp dppass) {
            glStencilOpSeparate(face, sfail, dpfail, dppass);
        }

        public static void TexBuffer(TextureTarget target, uint internalformat, uint buffer) {
            glTexBuffer(target, internalformat, buffer);
        }

        public static void TexBufferRange(uint target, uint internalformat, uint buffer, int offset, int size) {
            glTexBufferRange(target, internalformat, buffer, offset, size);
        }

        public static void TexImage1D(TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels) {
            glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
        }

        public static void TexImage2D(TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels) {
            glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
        }

        public static void TexImage2DMultisample(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations) {
            glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
        }

        public static void TexImage3D(TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels) {
            glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }

        public static void TexImage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations) {
            glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }

        public static void TexParameterf(TextureTarget target, TextureParameterName pname, float param) {
            glTexParameterf(target, pname, param);
        }

        public static void TexParameterfv(TextureTarget target, TextureParameterName pname, float[] _params) {
            glTexParameterfv(target, pname, _params);
        }

        public static void TexParameteri(TextureTarget target, TextureParameterName pname, int param) {
            glTexParameteri(target, pname, param);
        }

        public static void TexParameterIiv(TextureTarget target, TextureParameterName pname, int[] _params) {
            glTexParameterIiv(target, pname, _params);
        }

        public static void TexParameterIuiv(TextureTarget target, TextureParameterName pname, uint[] _params) {
            glTexParameterIuiv(target, pname, _params);
        }

        public static void TexParameteriv(TextureTarget target, TextureParameterName pname, int[] _params) {
            glTexParameteriv(target, pname, _params);
        }

        public static void TexStorage1D(uint target, int levels, uint internalformat, int width) {
            glTexStorage1D(target, levels, internalformat, width);
        }

        public static void TexStorage2D(uint target, int levels, uint internalformat, int width, int height) {
            glTexStorage2D(target, levels, internalformat, width, height);
        }

        public static void TexStorage2DMultisample(uint target, int samples, uint internalformat, int width, int height, bool fixedsamplelocations) {
            glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
        }

        public static void TexStorage3D(uint target, int levels, uint internalformat, int width, int height, int depth) {
            glTexStorage3D(target, levels, internalformat, width, height, depth);
        }

        public static void TexStorage3DMultisample(uint target, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations) {
            glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }

        public static void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels) {
            glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
        }

        public static void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels) {
            glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        public static void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels) {
            glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        public static void TextureBarrier() {
            glTextureBarrier();
        }

        public static void TextureBuffer(uint texture, uint internalformat, uint buffer) {
            glTextureBuffer(texture, internalformat, buffer);
        }

        public static void TextureBufferRange(uint texture, uint internalformat, uint buffer, int offset, int size) {
            glTextureBufferRange(texture, internalformat, buffer, offset, size);
        }

        public static void TextureParameterf(uint texture, uint pname, float param) {
            glTextureParameterf(texture, pname, param);
        }

        public static void TextureParameterfv(uint texture, uint pname, ref float param) {
            glTextureParameterfv(texture, pname, ref param);
        }

        public static void TextureParameteri(uint texture, uint pname, int param) {
            glTextureParameteri(texture, pname, param);
        }

        public static void TextureParameterIiv(uint texture, uint pname, ref int _params) {
            glTextureParameterIiv(texture, pname, ref _params);
        }

        public static void TextureParameterIuiv(uint texture, uint pname, ref uint _params) {
            glTextureParameterIuiv(texture, pname, ref _params);
        }

        public static void TextureParameteriv(uint texture, uint pname, ref int param) {
            glTextureParameteriv(texture, pname, ref param);
        }

        public static void TextureStorage1D(uint texture, int levels, uint internalformat, int width) {
            glTextureStorage1D(texture, levels, internalformat, width);
        }

        public static void TextureStorage2D(uint texture, int levels, uint internalformat, int width, int height) {
            glTextureStorage2D(texture, levels, internalformat, width, height);
        }

        public static void TextureStorage2DMultisample(uint texture, int samples, uint internalformat, int width, int height, bool fixedsamplelocations) {
            glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
        }

        public static void TextureStorage3D(uint texture, int levels, uint internalformat, int width, int height, int depth) {
            glTextureStorage3D(texture, levels, internalformat, width, height, depth);
        }

        public static void TextureStorage3DMultisample(uint texture, int samples, uint internalformat, int width, int height, int depth, bool fixedsamplelocations) {
            glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
        }

        public static void TextureSubImage1D(uint texture, int level, int xoffset, int width, uint format, uint type, IntPtr pixels) {
            glTextureSubImage1D(texture, level, xoffset, width, format, type, pixels);
        }

        public static void TextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, uint format, uint type, IntPtr pixels) {
            glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);
        }

        public static void TextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint format, uint type, IntPtr pixels) {
            glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }

        public static void TextureView(uint texture, uint target, uint origtexture, uint internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers) {
            glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }

        public static void TransformFeedbackBufferBase(uint xfb, uint index, uint buffer) {
            glTransformFeedbackBufferBase(xfb, index, buffer);
        }

        public static void TransformFeedbackBufferRange(uint xfb, uint index, uint buffer, int offset, int size) {
            glTransformFeedbackBufferRange(xfb, index, buffer, offset, size);
        }

        public static void TransformFeedbackVaryings(uint program, int count, string[] varyings, uint bufferMode) {
            glTransformFeedbackVaryings(program, count, varyings, bufferMode);
        }

        public static void Uniform1d(int location, double x) {
            glUniform1d(location, x);
        }

        public static void Uniform1dv(int location, int count, double[] value) {
            glUniform1dv(location, count, value);
        }

        public static void Uniform1f(int location, float v0) {
            glUniform1f(location, v0);
        }

        public static void Uniform1fv(int location, int count, float[] value) {
            glUniform1fv(location, count, value);
        }

        public static void Uniform1i(int location, int v0) {
            glUniform1i(location, v0);
        }

        public static void Uniform1iv(int location, int count, int[] value) {
            glUniform1iv(location, count, value);
        }

        public static void Uniform1ui(int location, uint v0) {
            glUniform1ui(location, v0);
        }

        public static void Uniform1uiv(int location, int count, uint[] value) {
            glUniform1uiv(location, count, value);
        }

        public static void Uniform2d(int location, double x, double y) {
            glUniform2d(location, x, y);
        }

        public static void Uniform2dv(int location, int count, double[] value) {
            glUniform2dv(location, count, value);
        }

        public static void Uniform2f(int location, float v0, float v1) {
            glUniform2f(location, v0, v1);
        }

        public static void Uniform2fv(int location, int count, float[] value) {
            glUniform2fv(location, count, value);
        }

        public static void Uniform2i(int location, int v0, int v1) {
            glUniform2i(location, v0, v1);
        }

        public static void Uniform2iv(int location, int count, int[] value) {
            glUniform2iv(location, count, value);
        }

        public static void Uniform2ui(int location, uint v0, uint v1) {
            glUniform2ui(location, v0, v1);
        }

        public static void Uniform2uiv(int location, int count, uint[] value) {
            glUniform2uiv(location, count, value);
        }

        public static void Uniform3d(int location, double x, double y, double z) {
            glUniform3d(location, x, y, z);
        }

        public static void Uniform3dv(int location, int count, double[] value) {
            glUniform3dv(location, count, value);
        }

        public static void Uniform3f(int location, float v0, float v1, float v2) {
            glUniform3f(location, v0, v1, v2);
        }

        public static void Uniform3fv(int location, int count, float[] value) {
            glUniform3fv(location, count, value);
        }

        public static void Uniform3i(int location, int v0, int v1, int v2) {
            glUniform3i(location, v0, v1, v2);
        }

        public static void Uniform3iv(int location, int count, int[] value) {
            glUniform3iv(location, count, value);
        }

        public static void Uniform3ui(int location, uint v0, uint v1, uint v2) {
            glUniform3ui(location, v0, v1, v2);
        }

        public static void Uniform3uiv(int location, int count, uint[] value) {
            glUniform3uiv(location, count, value);
        }

        public static void Uniform4d(int location, double x, double y, double z, double w) {
            glUniform4d(location, x, y, z, w);
        }

        public static void Uniform4dv(int location, int count, double[] value) {
            glUniform4dv(location, count, value);
        }

        public static void Uniform4f(int location, float v0, float v1, float v2, float v3) {
            glUniform4f(location, v0, v1, v2, v3);
        }

        public static void Uniform4fv(int location, int count, float[] value) {
            glUniform4fv(location, count, value);
        }

        public static void Uniform4i(int location, int v0, int v1, int v2, int v3) {
            glUniform4i(location, v0, v1, v2, v3);
        }

        public static void Uniform4iv(int location, int count, int[] value) {
            glUniform4iv(location, count, value);
        }

        public static void Uniform4ui(int location, uint v0, uint v1, uint v2, uint v3) {
            glUniform4ui(location, v0, v1, v2, v3);
        }

        public static void Uniform4uiv(int location, int count, uint[] value) {
            glUniform4uiv(location, count, value);
        }

        public static void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding) {
            glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
        }

        public static void UniformMatrix2dv(int location, int count, bool transpose, double[] value) {
            glUniformMatrix2dv(location, count, transpose, value);
        }

        public static void UniformMatrix2fv(int location, int count, bool transpose, float[] value) {
            glUniformMatrix2fv(location, count, transpose, value);
        }

        public static void UniformMatrix2x3dv(int location, int count, bool transpose, double[] value) {
            glUniformMatrix2x3dv(location, count, transpose, value);
        }

        public static void UniformMatrix2x3fv(int location, int count, bool transpose, float[] value) {
            glUniformMatrix2x3fv(location, count, transpose, value);
        }

        public static void UniformMatrix2x4dv(int location, int count, bool transpose, double[] value) {
            glUniformMatrix2x4dv(location, count, transpose, value);
        }

        public static void UniformMatrix2x4fv(int location, int count, bool transpose, float[] value) {
            glUniformMatrix2x4fv(location, count, transpose, value);
        }

        public static void UniformMatrix3dv(int location, int count, bool transpose, double[] value) {
            glUniformMatrix3dv(location, count, transpose, value);
        }

        public static void UniformMatrix3fv(int location, int count, bool transpose, float[] value) {
            glUniformMatrix3fv(location, count, transpose, value);
        }

        public static void UniformMatrix3x2dv(int location, int count, bool transpose, double[] value) {
            glUniformMatrix3x2dv(location, count, transpose, value);
        }

        public static void UniformMatrix3x2fv(int location, int count, bool transpose, float[] value) {
            glUniformMatrix3x2fv(location, count, transpose, value);
        }

        public static void UniformMatrix3x4dv(int location, int count, bool transpose, double[] value) {
            glUniformMatrix3x4dv(location, count, transpose, value);
        }

        public static void UniformMatrix3x4fv(int location, int count, bool transpose, float[] value) {
            glUniformMatrix3x4fv(location, count, transpose, value);
        }

        public static void UniformMatrix4dv(int location, int count, bool transpose, double[] value) {
            glUniformMatrix4dv(location, count, transpose, value);
        }

        public static void UniformMatrix4fv(int location, int count, bool transpose, float[] value) {
            glUniformMatrix4fv(location, count, transpose, value);
        }

        public static void UniformMatrix4x2dv(int location, int count, bool transpose, double[] value) {
            glUniformMatrix4x2dv(location, count, transpose, value);
        }

        public static void UniformMatrix4x2fv(int location, int count, bool transpose, float[] value) {
            glUniformMatrix4x2fv(location, count, transpose, value);
        }

        public static void UniformMatrix4x3dv(int location, int count, bool transpose, double[] value) {
            glUniformMatrix4x3dv(location, count, transpose, value);
        }

        public static void UniformMatrix4x3fv(int location, int count, bool transpose, float[] value) {
            glUniformMatrix4x3fv(location, count, transpose, value);
        }

        public static void UniformSubroutinesuiv(uint shadertype, int count, uint[] indices) {
            glUniformSubroutinesuiv(shadertype, count, indices);
        }

        public static bool UnmapBuffer(BufferTarget target) {
            return glUnmapBuffer(target);
        }

        public static bool UnmapNamedBuffer(uint buffer) {
            return glUnmapNamedBuffer(buffer);
        }

        public static void UseProgram(uint program) {
            glUseProgram(program);
        }

        public static void UseProgramStages(uint pipeline, uint stages, uint program) {
            glUseProgramStages(pipeline, stages, program);
        }

        public static void ValidateProgram(uint program) {
            glValidateProgram(program);
        }

        public static void ValidateProgramPipeline(uint pipeline) {
            glValidateProgramPipeline(pipeline);
        }

        public static void VertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex) {
            glVertexArrayAttribBinding(vaobj, attribindex, bindingindex);
        }

        public static void VertexArrayAttribFormat(uint vaobj, uint attribindex, int size, VertexAttribPointerType type, bool normalized, uint relativeoffset) {
            glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
        }

        public static void VertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, VertexAttribPointerType type, uint relativeoffset) {
            glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
        }

        public static void VertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, VertexAttribPointerType type, uint relativeoffset) {
            glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
        }

        public static void VertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor) {
            glVertexArrayBindingDivisor(vaobj, bindingindex, divisor);
        }

        public static void VertexArrayElementBuffer(uint vaobj, uint buffer) {
            glVertexArrayElementBuffer(vaobj, buffer);
        }

        public static void VertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, int offset, int stride) {
            glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
        }

        public static void VertexArrayVertexBuffers(uint vaobj, uint first, int count, ref uint buffers, ref int offsets, ref int strides) {
            glVertexArrayVertexBuffers(vaobj, first, count, ref buffers, ref offsets, ref strides);
        }

        public static void VertexAttrib1d(uint index, double x) {
            glVertexAttrib1d(index, x);
        }

        public static void VertexAttrib1dv(uint index, ref double v) {
            glVertexAttrib1dv(index, ref v);
        }

        public static void VertexAttrib1f(uint index, float x) {
            glVertexAttrib1f(index, x);
        }

        public static void VertexAttrib1fv(uint index, ref float v) {
            glVertexAttrib1fv(index, ref v);
        }

        public static void VertexAttrib1s(uint index, short x) {
            glVertexAttrib1s(index, x);
        }

        public static void VertexAttrib1sv(uint index, ref short v) {
            glVertexAttrib1sv(index, ref v);
        }

        public static void VertexAttrib2d(uint index, double x, double y) {
            glVertexAttrib2d(index, x, y);
        }

        public static void VertexAttrib2dv(uint index, double[] v) {
            glVertexAttrib2dv(index, v);
        }

        public static void VertexAttrib2f(uint index, float x, float y) {
            glVertexAttrib2f(index, x, y);
        }

        public static void VertexAttrib2fv(uint index, float[] v) {
            glVertexAttrib2fv(index, v);
        }

        public static void VertexAttrib2s(uint index, short x, short y) {
            glVertexAttrib2s(index, x, y);
        }

        public static void VertexAttrib2sv(uint index, short[] v) {
            glVertexAttrib2sv(index, v);
        }

        public static void VertexAttrib3d(uint index, double x, double y, double z) {
            glVertexAttrib3d(index, x, y, z);
        }

        public static void VertexAttrib3dv(uint index, double[] v) {
            glVertexAttrib3dv(index, v);
        }

        public static void VertexAttrib3f(uint index, float x, float y, float z) {
            glVertexAttrib3f(index, x, y, z);
        }

        public static void VertexAttrib3fv(uint index, float[] v) {
            glVertexAttrib3fv(index, v);
        }

        public static void VertexAttrib3s(uint index, short x, short y, short z) {
            glVertexAttrib3s(index, x, y, z);
        }

        public static void VertexAttrib3sv(uint index, short[] v) {
            glVertexAttrib3sv(index, v);
        }

        public static void VertexAttrib4bv(uint index, sbyte[] v) {
            glVertexAttrib4bv(index, v);
        }

        public static void VertexAttrib4d(uint index, double x, double y, double z, double w) {
            glVertexAttrib4d(index, x, y, z, w);
        }

        public static void VertexAttrib4dv(uint index, double[] v) {
            glVertexAttrib4dv(index, v);
        }

        public static void VertexAttrib4f(uint index, float x, float y, float z, float w) {
            glVertexAttrib4f(index, x, y, z, w);
        }

        public static void VertexAttrib4fv(uint index, float[] v) {
            glVertexAttrib4fv(index, v);
        }

        public static void VertexAttrib4iv(uint index, int[] v) {
            glVertexAttrib4iv(index, v);
        }

        public static void VertexAttrib4Nbv(uint index, sbyte[] v) {
            glVertexAttrib4Nbv(index, v);
        }

        public static void VertexAttrib4Niv(uint index, int[] v) {
            glVertexAttrib4Niv(index, v);
        }

        public static void VertexAttrib4Nsv(uint index, short[] v) {
            glVertexAttrib4Nsv(index, v);
        }

        public static void VertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w) {
            glVertexAttrib4Nub(index, x, y, z, w);
        }

        public static void VertexAttrib4Nubv(uint index, byte[] v) {
            glVertexAttrib4Nubv(index, v);
        }

        public static void VertexAttrib4Nuiv(uint index, uint[] v) {
            glVertexAttrib4Nuiv(index, v);
        }

        public static void VertexAttrib4Nusv(uint index, ushort[] v) {
            glVertexAttrib4Nusv(index, v);
        }

        public static void VertexAttrib4s(uint index, short x, short y, short z, short w) {
            glVertexAttrib4s(index, x, y, z, w);
        }

        public static void VertexAttrib4sv(uint index, short[] v) {
            glVertexAttrib4sv(index, v);
        }

        public static void VertexAttrib4ubv(uint index, byte[] v) {
            glVertexAttrib4ubv(index, v);
        }

        public static void VertexAttrib4uiv(uint index, uint[] v) {
            glVertexAttrib4uiv(index, v);
        }

        public static void VertexAttrib4usv(uint index, ushort[] v) {
            glVertexAttrib4usv(index, v);
        }

        public static void VertexAttribBinding(uint attribindex, uint bindingindex) {
            glVertexAttribBinding(attribindex, bindingindex);
        }

        public static void VertexAttribDivisor(uint index, uint divisor) {
            glVertexAttribDivisor(index, divisor);
        }

        public static void VertexAttribFormat(uint attribindex, int size, VertexAttribPointerType type, bool normalized, uint relativeoffset) {
            glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
        }

        public static void VertexAttribI1i(uint index, int x) {
            glVertexAttribI1i(index, x);
        }

        public static void VertexAttribI1iv(uint index, ref int v) {
            glVertexAttribI1iv(index, ref v);
        }

        public static void VertexAttribI1ui(uint index, uint x) {
            glVertexAttribI1ui(index, x);
        }

        public static void VertexAttribI1uiv(uint index, ref uint v) {
            glVertexAttribI1uiv(index, ref v);
        }

        public static void VertexAttribI2i(uint index, int x, int y) {
            glVertexAttribI2i(index, x, y);
        }

        public static void VertexAttribI2iv(uint index, int[] v) {
            glVertexAttribI2iv(index, v);
        }

        public static void VertexAttribI2ui(uint index, uint x, uint y) {
            glVertexAttribI2ui(index, x, y);
        }

        public static void VertexAttribI2uiv(uint index, uint[] v) {
            glVertexAttribI2uiv(index, v);
        }

        public static void VertexAttribI3i(uint index, int x, int y, int z) {
            glVertexAttribI3i(index, x, y, z);
        }

        public static void VertexAttribI3iv(uint index, int[] v) {
            glVertexAttribI3iv(index, v);
        }

        public static void VertexAttribI3ui(uint index, uint x, uint y, uint z) {
            glVertexAttribI3ui(index, x, y, z);
        }

        public static void VertexAttribI3uiv(uint index, uint[] v) {
            glVertexAttribI3uiv(index, v);
        }

        public static void VertexAttribI4bv(uint index, sbyte[] v) {
            glVertexAttribI4bv(index, v);
        }

        public static void VertexAttribI4i(uint index, int x, int y, int z, int w) {
            glVertexAttribI4i(index, x, y, z, w);
        }

        public static void VertexAttribI4iv(uint index, int[] v) {
            glVertexAttribI4iv(index, v);
        }

        public static void VertexAttribI4sv(uint index, short[] v) {
            glVertexAttribI4sv(index, v);
        }

        public static void VertexAttribI4ubv(uint index, byte[] v) {
            glVertexAttribI4ubv(index, v);
        }

        public static void VertexAttribI4ui(uint index, uint x, uint y, uint z, uint w) {
            glVertexAttribI4ui(index, x, y, z, w);
        }

        public static void VertexAttribI4uiv(uint index, uint[] v) {
            glVertexAttribI4uiv(index, v);
        }

        public static void VertexAttribI4usv(uint index, ushort[] v) {
            glVertexAttribI4usv(index, v);
        }

        public static void VertexAttribIFormat(uint attribindex, int size, VertexAttribPointerType type, uint relativeoffset) {
            glVertexAttribIFormat(attribindex, size, type, relativeoffset);
        }

        public static void VertexAttribIPointer(uint index, int size, VertexAttribEnum type, int stride, IntPtr pointer) {
            glVertexAttribIPointer(index, size, type, stride, pointer);
        }

        public static void VertexAttribL1d(uint index, double x) {
            glVertexAttribL1d(index, x);
        }

        public static void VertexAttribL1dv(uint index, ref double v) {
            glVertexAttribL1dv(index, ref v);
        }

        public static void VertexAttribL2d(uint index, double x, double y) {
            glVertexAttribL2d(index, x, y);
        }

        public static void VertexAttribL2dv(uint index, double[] v) {
            glVertexAttribL2dv(index, v);
        }

        public static void VertexAttribL3d(uint index, double x, double y, double z) {
            glVertexAttribL3d(index, x, y, z);
        }

        public static void VertexAttribL3dv(uint index, double[] v) {
            glVertexAttribL3dv(index, v);
        }

        public static void VertexAttribL4d(uint index, double x, double y, double z, double w) {
            glVertexAttribL4d(index, x, y, z, w);
        }

        public static void VertexAttribL4dv(uint index, double[] v) {
            glVertexAttribL4dv(index, v);
        }

        public static void VertexAttribLFormat(uint attribindex, int size, VertexAttribPointerType type, uint relativeoffset) {
            glVertexAttribLFormat(attribindex, size, type, relativeoffset);
        }

        public static void VertexAttribLPointer(uint index, int size, uint type, int stride, IntPtr pointer) {
            glVertexAttribLPointer(index, size, type, stride, pointer);
        }

        public static void VertexAttribP1ui(uint index, uint type, bool normalized, uint value) {
            glVertexAttribP1ui(index, type, normalized, value);
        }

        public static void VertexAttribP1uiv(uint index, uint type, bool normalized, ref uint value) {
            glVertexAttribP1uiv(index, type, normalized, ref value);
        }

        public static void VertexAttribP2ui(uint index, uint type, bool normalized, uint value) {
            glVertexAttribP2ui(index, type, normalized, value);
        }

        public static void VertexAttribP2uiv(uint index, uint type, bool normalized, ref uint value) {
            glVertexAttribP2uiv(index, type, normalized, ref value);
        }

        public static void VertexAttribP3ui(uint index, uint type, bool normalized, uint value) {
            glVertexAttribP3ui(index, type, normalized, value);
        }

        public static void VertexAttribP3uiv(uint index, uint type, bool normalized, ref uint value) {
            glVertexAttribP3uiv(index, type, normalized, ref value);
        }

        public static void VertexAttribP4ui(uint index, uint type, bool normalized, uint value) {
            glVertexAttribP4ui(index, type, normalized, value);
        }

        public static void VertexAttribP4uiv(uint index, uint type, bool normalized, ref uint value) {
            glVertexAttribP4uiv(index, type, normalized, ref value);
        }

        public static void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, bool normalized, int stride, IntPtr pointer) {
            glVertexAttribPointer(index, size, type, normalized, stride, pointer);
        }

        public static void VertexBindingDivisor(uint bindingindex, uint divisor) {
            glVertexBindingDivisor(bindingindex, divisor);
        }

        public static void Viewport(int x, int y, int width, int height) {
            glViewport(x, y, width, height);
        }

        public static void ViewportArrayv(uint first, int count, float[] v) {
            glViewportArrayv(first, count, v);
        }

        public static void ViewportIndexedf(uint index, float x, float y, float w, float h) {
            glViewportIndexedf(index, x, y, w, h);
        }

        public static void ViewportIndexedfv(uint index, float[] v) {
            glViewportIndexedfv(index, v);
        }

        public static void WaitSync(GLsync sync, uint flags, ulong timeout) {
            glWaitSync(sync, flags, timeout);
        }

    }
}
